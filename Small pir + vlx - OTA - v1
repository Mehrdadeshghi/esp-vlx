#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_VL53L0X.h>
#include <Preferences.h>
#include <WiFiManager.h>
#include <vector>
#include <numeric> // For std::min_element, std::max_element
#include <Update.h>
#include <ArduinoJson.h>

// ---------------------- Konfiguration ---------------------- //

// Vorhandene Endpoints
const char* registrationServerUrl   = "http://45.195.250.247:8002/device";
const char* calibrationServerUrl    = "http://45.195.250.247:8002/calibration";
const char* letterServerUrl         = "http://45.195.250.247:8002/letter";
const char* doorServerUrl           = "http://45.195.250.247:8002/door";
const char* keepaliveServerUrl      = "http://45.195.250.247:8002/keepalive";

// **NEU**: zusätzliche Endpoints
const char* logsServerUrl           = "http://45.195.250.247:8002/logs";
const char* measurementsServerUrl   = "http://45.195.250.247:8002/measurements";

// OTA-Server
const char* ota_host                = "http://45.195.250.247:8008";
#define CURRENT_FIRMWARE_VERSION    "1.0.5.7" // Version erhöht wegen Kalibrierungs-Debugging

// Zeitintervalle
unsigned long lastPingTime          = 0;
// unsigned long pingInterval          = 60000; // 1 Minute -> Wird im Loop nicht mehr gebraucht
unsigned long lastKeepAlive         = 0;
const unsigned long keepAliveInterval = 15 * 60 * 1000; // 15 Min -> Wird für Timer-Wakeup verwendet

// Hardware-Pins
#define PIR_PIN 27
#define LED_PIN 2
#define RESET_BUTTON_PIN 0 // Normalerweise BOOT-Button auf ESP32 Dev Kits

// Kalibrierung
int minDistance = 0;
int maxDistance = 0;

// Log-Puffer – hier als simpler globaler String
String logsBuffer;

// Sensor- und Speicherobjekte
Adafruit_VL53L0X lox;
Preferences preferences;

// --------------------------------------------------------------
// Vorwärtsdeklarationen
// --------------------------------------------------------------
void connectToWiFi();
bool isResetButtonPressed();
void calibrateVL53L0X(); // Enthält jetzt Debug-Logs
void sendToServer(const char* serverUrl, String jsonPayload);

void sendPing();
void checkDeviceFirmware();
void performOTA(String firmwareUrl);

void sendDeviceInfo();
void sendCalibrationData();
void sendLetterEvent(int distance);
void sendDoorEvent(int distance);
void sendKeepAlive();

void addLogEntry(const String &entry);
void sendLogs();

std::vector<int> collectMeasurementsForTenSeconds();
void sendMeasurements(const std::vector<int> &measurements);
void analyzeAndSendEvents(const std::vector<int> &distances);

void configureDeepSleep();

// --------------------------------------------------------------
// setup() - Hauptlogik für Boot und Wakeup
// --------------------------------------------------------------
void setup() {
  pinMode(PIR_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // LED initial aus

  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP); // Internen Pull-up aktivieren

  Serial.begin(115200);
  delay(200); // Kleine Pause für Serial Monitor
  Serial.println("\n\n[BOOT/WAKEUP] Starting...");

  // *** HINZUGEFÜGT: I2C Bus initialisieren ***
  Wire.begin(); // Standard SDA/SCL Pins verwenden (ggf. anpassen: Wire.begin(SDA_PIN, SCL_PIN);)
  Serial.println("[SETUP] I2C Bus (Wire) initialisiert.");

  preferences.begin("briefkasten", false); // Namespace "briefkasten" öffnen

  // WiFiManager Instanz
  WiFiManager wifiManager;

  // Prüfen, ob Reset-Taster beim Start gedrückt wurde
  if (isResetButtonPressed()) {
    Serial.println("[INFO] Reset-Taster gedrückt -> Lösche gespeicherte WLAN-Daten.");
    wifiManager.resetSettings();
    preferences.clear(); // Auch Kalibrierungswerte etc. löschen bei Reset? Optional!
    Serial.println("[INFO] Alle Preferences gelöscht.");
    // Nach dem Reset ist ein Neustart sinnvoll, um in den AP-Modus zu gehen
    Serial.println("[INFO] Starte neu für WLAN-Konfiguration...");
    delay(1000);
    ESP.restart();
  }

  // Grund des Aufwachens ermitteln
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();

  // === Fall 1: Aufwachen durch PIR-Sensor ===
  if (wakeup_reason == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println("[WAKEUP] PIR-Sensor (EXT0)");
    digitalWrite(LED_PIN, HIGH); // LED an: Messung beginnt

    // PRIORITÄT 1: Sofort VL53L0X initialisieren und messen
    Serial.println("[MEASURE] Initialisiere VL53L0X sofort...");
    if (!lox.begin()) {
        Serial.println("[ERROR] VL53L0X Init fehlgeschlagen nach PIR-Wakeup! Gehe schlafen.");
        addLogEntry("VL53 init fail on PIR wakeup");
        digitalWrite(LED_PIN, LOW); // LED wieder aus
        configureDeepSleep();
        return; // Wichtig: setup() hier beenden
    }

    Serial.println("[MEASURE] Starte 10s-Messung...");
    std::vector<int> distances = collectMeasurementsForTenSeconds();
    digitalWrite(LED_PIN, LOW); // LED aus: Messung beendet
    Serial.println("[MEASURE] 10s-Messung beendet.");

    // PRIORITÄT 2: WLAN verbinden (NACH der Messung)
    Serial.println("[WIFI] Verbinde WLAN nach Messung...");
    connectToWiFi();

    // PRIORITÄT 3: Daten verarbeiten und senden (NUR wenn WLAN verbunden)
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("[WIFI] Verbunden. Verarbeite und sende Daten.");
        minDistance = preferences.getInt("minDistance", 0);
        maxDistance = preferences.getInt("maxDistance", 0);
        String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
        Serial.printf("[INFO] Nach Messung: MAC=%s, Min=%d, Max=%d\n", macAddress.c_str(), minDistance, maxDistance);

        if (minDistance == 0 || maxDistance == 0) {
            Serial.println("[WARNUNG] Keine (gültigen) Kalibrierungsdaten nach PIR-Wakeup gefunden.");
            addLogEntry("Missing or invalid calibration on PIR wakeup.");
        }

        if (!distances.empty()) {
            sendMeasurements(distances);
            if (minDistance != 0 && maxDistance != 0) {
                analyzeAndSendEvents(distances);
            } else {
                addLogEntry("Skipping event analysis due to missing/invalid calibration.");
            }
        } else {
            addLogEntry("Keine Distanzwerte beim PIR-Wakeup gesammelt.");
        }
        sendLogs();
    } else {
        Serial.println("[ERROR] Keine WLAN-Verbindung nach Messung. Messdaten können nicht gesendet werden.");
        addLogEntry("No WiFi after PIR measurement. Measurement/Event data lost.");
    }

    // PRIORITÄT 4: Wieder Schlafen
    Serial.println("[DEEPSLEEP] Bereite Deep Sleep nach PIR-Aktion vor.");
    configureDeepSleep();

  // === Fall 2: Aufwachen durch Timer ===
  } else if (wakeup_reason == ESP_SLEEP_WAKEUP_TIMER) {
    Serial.println("[WAKEUP] Timer (KeepAlive/OTA Check)");
    connectToWiFi();
    if (WiFi.status() == WL_CONNECTED) {
      sendPing();
      checkDeviceFirmware();
      sendKeepAlive();
      sendLogs();
    } else {
      addLogEntry("No WiFi on Timer Wakeup.");
    }
    configureDeepSleep();

  // === Fall 3: Normaler Start (Hochfahren/Reset) ===
  } else {
    Serial.printf("[BOOT] Normaler Start (Grund: %d)\n", wakeup_reason);
    digitalWrite(LED_PIN, HIGH);

    wifiManager.setConfigPortalTimeout(180);
    if (!wifiManager.autoConnect("BriefkastenAP")) {
      addLogEntry("WiFi AutoConnect Failed or Timed Out.");
      delay(10000);
      ESP.restart();
    }

    Serial.printf("[WIFI] Verbunden! IP=%s\n", WiFi.localIP().toString().c_str());
    String mac = WiFi.macAddress();
    Serial.printf("[INFO] MAC Addresse: %s\n", mac.c_str());

    String storedMac = preferences.getString("mac_address", "");
    if (storedMac != mac) {
       preferences.putString("mac_address", mac);
       addLogEntry(storedMac == "" ? "MAC address stored." : "MAC address updated.");
    }

    sendDeviceInfo();

    // ***** KALIBRIERUNG (NUR BEIM HOCHFAHREN/RESET) *****
    calibrateVL53L0X(); // Die neue Version mit Debugging!
    sendCalibrationData(); // Versucht, die (hoffentlich jetzt gültigen) Daten zu senden
    // ***** ENDE KALIBRIERUNG *****

    sendPing();
    checkDeviceFirmware();
    sendLogs();
    digitalWrite(LED_PIN, LOW);
    configureDeepSleep();
  }
}

// --------------------------------------------------------------
// loop() - Wird wegen Deep Sleep praktisch nicht ausgeführt
// --------------------------------------------------------------
void loop() {
  delay(10000);
  Serial.println("[LOOP] Unerwarteter Loop-Durchlauf. Gehe schlafen...");
  configureDeepSleep();
}

// --------------------------------------------------------------
// WiFi + Reset-Taster
// --------------------------------------------------------------
void connectToWiFi() {
  if (WiFi.status() == WL_CONNECTED) {
    // Serial.println("[WIFI] Bereits verbunden."); // Weniger verbose
    return;
  }
  Serial.println("[WIFI] Versuche Verbindung mit gespeicherten Daten...");
  WiFi.begin();
  int retries = 0;
  const int maxRetries = 20; // Ca. 10 Sekunden
  while (WiFi.status() != WL_CONNECTED && retries++ < maxRetries) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  if (WiFi.status() == WL_CONNECTED) {
    Serial.printf("[WIFI] Verbunden! IP=%s\n", WiFi.localIP().toString().c_str());
  } else {
    Serial.println("[WIFI] Verbindung fehlgeschlagen nach Retries.");
  }
}

bool isResetButtonPressed() {
  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    Serial.println("[INFO] Reset-Taster (GPIO0) beim Start LOW erkannt.");
    unsigned long pressedTime = millis();
    while (digitalRead(RESET_BUTTON_PIN) == LOW) {
      delay(50);
      if (millis() - pressedTime > 2000) {
        Serial.println("[INFO] Reset-Taster > 2s gehalten -> Aktion auslösen.");
        return true;
      }
    }
    Serial.println("[INFO] Reset-Taster < 2s gehalten -> Keine Aktion.");
  }
  return false;
}

// --------------------------------------------------------------
// VL53L0X Kalibrierung (Version mit Debugging)
// --------------------------------------------------------------
void calibrateVL53L0X() {
  Serial.println("[CAL] Starte VL53L0X-Kalibrierung...");
  // Wire.begin(); // Ist jetzt am Anfang von setup()
  if (!lox.begin()) {
    Serial.println("[CAL][ERROR] VL53L0X Init fehlgeschlagen!");
    addLogEntry("VL53 init fail during calibration");
    minDistance = 0; // Setze auf ungültige Werte
    maxDistance = 0;
    return;
  }

  // lox.setMeasurementTimingBudgetMicroSeconds(33000); // Optional: Anderes Budget versuchen

  unsigned long calibrationStartTime = millis();
  unsigned long calibrationDuration = 3000; // 3 Sekunden kalibrieren
  int currentMin = 8190;
  int currentMax = 0;
  int measurementCount = 0; // Zähle alle Versuche
  int validMeasurements = 0; // Zähle nur die als gültig betrachteten

  Serial.println("[CAL] Messe für 3 Sekunden (Status != 4 gilt als gültig)...");
  while (millis() - calibrationStartTime < calibrationDuration) {
    measurementCount++;
    VL53L0X_RangingMeasurementData_t measurement;
    lox.rangingTest(&measurement, false); // false = warte auf Abschluss der Messung

    // *** Logge IMMER Status und Distanz ***
    Serial.printf("[CAL] Versuch %d: Status=%d, Distanz=%d mm\n",
                  measurementCount, measurement.RangeStatus, measurement.RangeMilliMeter);

    // *** RangeStatus != 4 als Kriterium für Gültigkeit ***
    if (measurement.RangeStatus != 4) {
      int distance = measurement.RangeMilliMeter;
       // Zusätzliche Plausibilitätsprüfung (Werte > 0 und < 2000mm = 2m)
       if (distance > 0 && distance < 2000) { // Passen Sie ggf. 2000 an Ihren max. erwarteten Wert an
          if (distance < currentMin) currentMin = distance;
          if (distance > currentMax) currentMax = distance;
          validMeasurements++;
          // Serial.println("[CAL] -> Wert als gültig akzeptiert."); // Optionales Detail-Logging
       } else {
            // Serial.printf("[CAL] -> Wert %d mm außerhalb Plausibilitätsbereich (0-2000) oder ungültig.\n", distance);
       }
    } else {
         // Optional: Loggen, dass Status 4 empfangen wurde
         // Serial.println("[CAL] -> Status 4 (ungültig) empfangen.");
    }
    delay(50); // Kurze Pause zwischen Messungen
  }

  Serial.printf("[CAL] Kalibrierungs-Loop beendet. %d Versuche, %d als gültig betrachtet.\n", measurementCount, validMeasurements);

  // *** Schwelle für gültige Messungen reduziert auf > 2 ***
  if (validMeasurements > 2 && currentMin < 8190) { // Benötigt jetzt mindestens 3 gültige Messungen
    minDistance = currentMin - 15;
    if (minDistance < 5) minDistance = 5; // Min nicht zu klein werden lassen (z.B. 5mm)
    maxDistance = currentMax + 15;

    preferences.putInt("minDistance", minDistance);
    preferences.putInt("maxDistance", maxDistance);
    Serial.printf("[CAL] Kalibrierung erfolgreich abgeschlossen.\n");
    Serial.printf("[CAL] -> minDistance = %d mm, maxDistance = %d mm (gespeichert)\n", minDistance, maxDistance);
    addLogEntry("Calibration done. Min=" + String(minDistance) + ", Max=" + String(maxDistance) + " (ValidCnt=" + String(validMeasurements) + ")");
  } else {
    // Die ursprüngliche Fehlermeldung
    Serial.println("[CAL][ERROR] Keine ausreichenden gültigen Messwerte während der Kalibrierung erhalten.");
    addLogEntry("Calibration failed: Not enough valid measurements (Count=" + String(validMeasurements) + ")");
    minDistance = 0; // Setze auf ungültige Werte
    maxDistance = 0;
    // Alte ungültige Werte löschen, um Konsistenz sicherzustellen
    preferences.remove("minDistance");
    preferences.remove("maxDistance");
    Serial.println("[CAL] Ungültige Kalibrierungswerte (0) gesetzt und alte gelöscht.");
  }
}

// --------------------------------------------------------------
// Logs
// --------------------------------------------------------------
void addLogEntry(const String &entry) {
  unsigned long ms = millis();
  String newLine = "[T=" + String(ms) + "] " + entry + "\n";
  logsBuffer += newLine;
  Serial.println("[LOG] " + entry);
}

void sendLogs() {
  if (logsBuffer.isEmpty()) {
    return;
  }
  if (WiFi.status() != WL_CONNECTED) {
      Serial.println("[LOG] Kein WLAN, Logs können nicht gesendet werden.");
      return;
  }

  String mac = preferences.getString("mac_address", "Unbekannt");
  DynamicJsonDocument doc(2048);
  doc["mac_address"] = mac;
  JsonArray logsArray = doc.createNestedArray("logs");

  int startIndex = 0;
  int endIndex = -1;
  while (startIndex < logsBuffer.length()) {
    endIndex = logsBuffer.indexOf('\n', startIndex);
    if (endIndex == -1) {
      String line = logsBuffer.substring(startIndex);
      line.trim();
      if (line.length() > 0) logsArray.add(line);
      break;
    } else {
      String line = logsBuffer.substring(startIndex, endIndex);
      line.trim();
      if (line.length() > 0) logsArray.add(line);
      startIndex = endIndex + 1;
    }
  }

  if (logsArray.size() == 0) {
      Serial.println("[LOG] Nach dem Parsen keine gültigen Log-Zeilen zum Senden.");
      logsBuffer = "";
      return;
  }

  String payload;
  serializeJson(doc, payload);
  Serial.println("[LOG] Sende Logs an Server -> /logs");

  HTTPClient http;
  if (!http.begin(logsServerUrl)) {
      addLogEntry("HTTP begin failed for /logs");
      return;
  }
  http.addHeader("Content-Type", "application/json");
  http.setConnectTimeout(5000);
  http.setTimeout(10000);
  int code = http.POST(payload);

  if (code > 0 && code < 300) {
    Serial.printf("[HTTP] Logs gesendet, Server antwortet mit Code: %d\n", code);
    logsBuffer = ""; // Puffer nur bei Erfolg leeren
  } else {
    Serial.printf("[HTTP][ERROR] Fehler beim Senden der Logs. Code: %d\n", code);
    if (code < 0) {
       Serial.printf("[HTTP] Fehler: %s\n", http.errorToString(code).c_str());
    }
    addLogEntry("Failed to send logs to server. HTTP Code: " + String(code));
  }
  http.end();
}


// --------------------------------------------------------------
// 10-Sekunden-Messung + Senden
// --------------------------------------------------------------
std::vector<int> collectMeasurementsForTenSeconds() {
  std::vector<int> distances;
  lox.setMeasurementTimingBudgetMicroSeconds(20000);

  unsigned long start = millis();
  unsigned long measureDuration = 10000;
  int validCount = 0;
  int invalidCount = 0;

  // Serial.println("[MEASURE_LOOP] Starte Mess-Schleife für 10s..."); // Weniger verbose
  while (millis() - start < measureDuration) {
    VL53L0X_RangingMeasurementData_t m;
    lox.rangingTest(&m, false);

    if (m.RangeStatus != 4) { // Status != 4 als gültig betrachten
       if (m.RangeMilliMeter > 0 && m.RangeMilliMeter < 8190) { // Plausibler Bereich
          distances.push_back(m.RangeMilliMeter);
          validCount++;
       } else {
          invalidCount++;
       }
    } else {
      invalidCount++;
    }
    delay(30); // Wichtig für Stabilität und andere Tasks
  }
  // Serial.println(); // Nicht mehr nötig ohne Punkte/X
  Serial.printf("[MEASURE_LOOP] 10s-Messung beendet. %d gültige, %d ungültige Werte.\n", validCount, invalidCount);
  return distances;
}


void sendMeasurements(const std::vector<int> &measurements) {
  if (measurements.empty()) {
      addLogEntry("No measurements collected to send.");
      return;
  }
  if (WiFi.status() != WL_CONNECTED) {
      addLogEntry("Cannot send measurements, no WiFi.");
      return;
  }

  String mac = preferences.getString("mac_address", "Unbekannt");
  DynamicJsonDocument doc(4096); // Ausreichend für ca. 250-300 Messwerte
  doc["mac_address"] = mac;
  JsonArray measureArray = doc.createNestedArray("measurements");
  for (int measurement : measurements) {
      measureArray.add(measurement);
  }

  String payload;
  serializeJson(doc, payload);

  Serial.println("[MEASURE] Sende Messwerte an Server -> /measurements");
  sendToServer(measurementsServerUrl, payload);
  addLogEntry("Measurements sent. Count=" + String(measurements.size()));
}

void analyzeAndSendEvents(const std::vector<int> &distances) {
  if (distances.empty()) {
      addLogEntry("No measurements to analyze for events.");
      return;
  }
  // Lese Kalibrierungswerte direkt hier, falls sie sich geändert haben könnten?
  // Besser: Vertraue auf die Werte, die zu Beginn des PIR-Wakeups gelesen wurden.
  if (minDistance == 0 || maxDistance == 0) {
      addLogEntry("Cannot analyze events, calibration data invalid.");
      return;
  }

  int minVal = 8190;
  int maxVal = 0;
  for (int d : distances) {
      if (d < minVal) minVal = d;
      if (d > maxVal) maxVal = d;
  }

  Serial.printf("[ANALYSE] Messwerte: Min=%d mm, Max=%d mm (Kalibrierung: Min=%d, Max=%d)\n", minVal, maxVal, minDistance, maxDistance);

  // Toleranzen eventuell einführen?
  const int doorThresholdMargin = 10; // mm
  const int letterThresholdMargin = 10; // mm

  bool kastenGeoeffnet = (maxVal > (maxDistance + doorThresholdMargin));
  bool briefErkannt = (minVal < (minDistance - letterThresholdMargin));

  if (kastenGeoeffnet) {
    Serial.printf("[EVENT] Tür geöffnet erkannt (Max gemessen: %d > Kalibrierung Max+Margin: %d)\n", maxVal, maxDistance + doorThresholdMargin);
    sendDoorEvent(maxVal);
  } else if (briefErkannt) {
    Serial.printf("[EVENT] Brief erkannt (Min gemessen: %d < Kalibrierung Min-Margin: %d)\n", minVal, minDistance - letterThresholdMargin);
    sendLetterEvent(minVal);
  } else {
    // Serial.println("[ANALYSE] Kein spezifisches Ereignis (Brief/Tür) erkannt."); // Weniger verbose
    addLogEntry("No specific event (Letter/Door) recognized in 10s measure.");
  }
}

// --------------------------------------------------------------
// Events + KeepAlive Sende-Funktionen
// --------------------------------------------------------------
void sendDeviceInfo() {
  Serial.println("[DEV] Sende Geräteinfo...");
  String mac = preferences.getString("mac_address", "Nicht gesetzt");
  if (mac == "Nicht gesetzt") return;

  StaticJsonDocument<256> doc;
  doc["mac_address"] = mac;
  doc["firmware_version"] = CURRENT_FIRMWARE_VERSION;

  String jsonPayload;
  serializeJson(doc, jsonPayload);
  sendToServer(registrationServerUrl, jsonPayload);
  addLogEntry("DeviceInfo sent.");
}

void sendCalibrationData() {
  Serial.println("[CAL] Sende Kalibrierungsdaten...");
  String mac = preferences.getString("mac_address", "Nicht gesetzt");
   if (mac == "Nicht gesetzt") return;
   // Lese die aktuellen Werte (könnten gerade erst gesetzt worden sein)
   int currentMin = preferences.getInt("minDistance", 0);
   int currentMax = preferences.getInt("maxDistance", 0);

   if (currentMin == 0 || currentMax == 0) {
      Serial.println("[CAL][WARNUNG] Ungültige Kalibrierungsdaten in Preferences, überspringe Senden.");
      addLogEntry("Skipped sending invalid calibration data (from Prefs).");
      return;
   }

  StaticJsonDocument<256> doc;
  doc["mac_address"] = mac;
  doc["min_distance"] = currentMin;
  doc["max_distance"] = currentMax;

  String payload;
  serializeJson(doc, payload);
  sendToServer(calibrationServerUrl, payload);
  addLogEntry("Calibration data sent. Min=" + String(currentMin) + ", Max=" + String(currentMax));
}

void sendLetterEvent(int distance) {
  Serial.println("[EVENT] Sende 'Brief erkannt' Event...");
  String mac = preferences.getString("mac_address", "Nicht gesetzt");
  if (mac == "Nicht gesetzt") return;

  StaticJsonDocument<256> doc;
  doc["mac_address"] = mac;
  doc["event"] = "letter_detected";
  doc["distance"] = distance;

  String payload;
  serializeJson(doc, payload);
  sendToServer(letterServerUrl, payload);
  addLogEntry("LetterEvent sent. Dist=" + String(distance));
}

void sendDoorEvent(int distance) {
  Serial.println("[EVENT] Sende 'Tür geöffnet' Event...");
  String mac = preferences.getString("mac_address", "Nicht gesetzt");
   if (mac == "Nicht gesetzt") return;

  StaticJsonDocument<256> doc;
  doc["mac_address"] = mac;
  doc["event"] = "door_opened";
  doc["distance"] = distance;

  String payload;
  serializeJson(doc, payload);
  sendToServer(doorServerUrl, payload);
  addLogEntry("DoorEvent sent. Dist=" + String(distance));
}

void sendKeepAlive() {
  Serial.println("[ALIVE] Sende KeepAlive...");
  String mac = preferences.getString("mac_address", "Nicht gesetzt");
  if (mac == "Nicht gesetzt") return;

  StaticJsonDocument<256> doc;
  doc["mac_address"] = mac;

  String payload;
  serializeJson(doc, payload);
  sendToServer(keepaliveServerUrl, payload);
  addLogEntry("KeepAlive sent.");
}

// --------------------------------------------------------------
// sendToServer: Generische POST-Funktion
// --------------------------------------------------------------
void sendToServer(const char* serverUrl, String jsonPayload) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.printf("[HTTP] Kein WLAN -> Kann nicht an %s senden.\n", serverUrl);
    addLogEntry("HTTP Send failed (No WiFi) to " + String(serverUrl));
    return;
  }

  HTTPClient http;
  if (!http.begin(serverUrl)) {
      Serial.printf("[HTTP][ERROR] http.begin() fehlgeschlagen für URL: %s\n", serverUrl);
      addLogEntry("HTTP begin failed for " + String(serverUrl));
      return;
  }

  http.addHeader("Content-Type", "application/json");
  http.setConnectTimeout(5000);
  http.setTimeout(10000);

  // Serial.printf("[HTTP] POST an: %s\n", serverUrl); // Weniger verbose
  int httpCode = http.POST(jsonPayload);

  if (httpCode > 0) {
    // Serial.printf("[HTTP] URL: %s -> Code: %d\n", serverUrl, httpCode); // Weniger verbose
    if (httpCode < 200 || httpCode >= 300) { // Nur Fehler loggen?
         String response = http.getString();
         Serial.printf("[HTTP][ERROR] URL: %s -> Code: %d, Resp: %s\n", serverUrl, httpCode, response.c_str());
         addLogEntry("HTTP POST to " + String(serverUrl) + " failed with code: " + String(httpCode));
    }
  } else {
    Serial.printf("[HTTP][ERROR] Fehler beim Senden an %s: %s\n", serverUrl, http.errorToString(httpCode).c_str());
     addLogEntry("HTTP POST to " + String(serverUrl) + " failed: " + http.errorToString(httpCode));
  }
  http.end();
}

// --------------------------------------------------------------
// OTA-spezifisch
// --------------------------------------------------------------
void sendPing() {
  if (WiFi.status() != WL_CONNECTED) return;
  String mac = preferences.getString("mac_address", "Unbekannt");
  if (mac == "Unbekannt") return;

  HTTPClient http;
  String url = String(ota_host) + "/ping";
  if(!http.begin(url)) {
      addLogEntry("OTA Ping http.begin() failed.");
      return;
  }
  http.addHeader("Content-Type", "application/json");
  http.setTimeout(8000);

  StaticJsonDocument<256> doc;
  doc["mac"] = mac;
  doc["version"] = CURRENT_FIRMWARE_VERSION;

  String body;
  serializeJson(doc, body);

  // Serial.println("[OTA] Sende Ping an OTA Server..."); // Weniger verbose
  int code = http.POST(body);
  if (code < 0) { // Nur Fehler loggen
    Serial.printf("[OTA] Ping Fehler: %s\n", http.errorToString(code).c_str());
     addLogEntry("OTA Ping failed: " + http.errorToString(code));
  }
  http.end();
}

void checkDeviceFirmware() {
  if (WiFi.status() != WL_CONNECTED) return;
  String mac = preferences.getString("mac_address", "Unbekannt");
  if (mac == "Unbekannt") return;

  HTTPClient http;
  String url = String(ota_host) + "/device_firmware.json?mac=" + mac;
   if(!http.begin(url)) {
      addLogEntry("OTA Check http.begin() failed.");
      return;
  }
  http.setTimeout(8000);

  // Serial.println("[OTA] Frage Firmware Version vom Server ab..."); // Weniger verbose
  int code = http.GET();

  if (code == 200) {
    String payload = http.getString();
    DynamicJsonDocument doc(512);
    DeserializationError err = deserializeJson(doc, payload);

    if (!err) {
      const char* assignedVersion = doc["version"];
      const char* firmwareUrl = doc["url"];

      if (assignedVersion) {
          Serial.printf("[OTA] Aktuell: %s, Server: %s\n", CURRENT_FIRMWARE_VERSION, assignedVersion);
          if (firmwareUrl && strlen(firmwareUrl) > 0 && String(assignedVersion) != CURRENT_FIRMWARE_VERSION && String(assignedVersion) != "") {
            Serial.println("[OTA] Neuere Version verfügbar! Starte OTA Update...");
            addLogEntry("New firmware version " + String(assignedVersion) + " available. Starting OTA.");
            performOTA(String(firmwareUrl));
          }
      } else {
          addLogEntry("OTA check failed: 'version' field missing in server response.");
      }
    } else {
      addLogEntry("OTA check failed: JSON parse error - " + String(err.c_str()));
    }
  } else if (code != 404) { // Logge andere Fehler als "Not Found"
     addLogEntry("OTA check failed: HTTP " + String(code) + " " + http.errorToString(code));
  } // 404 (Not Found) wird ignoriert/nicht geloggt
  http.end();
}

void performOTA(String firmwareUrl) {
  if (WiFi.status() != WL_CONNECTED) {
      addLogEntry("OTA failed: No WiFi connection.");
      return;
  }

  Serial.printf("[OTA] Starte Download von: %s\n", firmwareUrl.c_str());
  addLogEntry("Starting OTA download from " + firmwareUrl);

  HTTPClient http;
  if (!http.begin(firmwareUrl)) {
      addLogEntry("OTA download http.begin() failed.");
      return;
  }
  http.setTimeout(60000); // Längerer Timeout für Download
  int code = http.GET();

  if (code == 200) {
    int contentLength = http.getSize();
    if (contentLength <= 0) {
      addLogEntry("OTA failed: Invalid Content-Length.");
      http.end();
      return;
    }
    Serial.printf("[OTA] Firmware Größe: %d Bytes\n", contentLength);

    if (!Update.begin(contentLength)) {
      addLogEntry("OTA failed: Not enough space - " + String(Update.errorString()));
      http.end();
      return;
    }
    addLogEntry("OTA Update started. Size: " + String(contentLength));
    Serial.println("[OTA] Update gestartet, schreibe Flash...");

    WiFiClient& stream = http.getStream();
    size_t written = Update.writeStream(stream);

    if (written != contentLength) {
        addLogEntry("OTA failed: Write error. Expected=" + String(contentLength) + ", Written=" + String(written) + ", Error: " + String(Update.errorString()));
        Update.abort();
        http.end();
        return;
    }

    if (!Update.end(true)) { // true = success
       addLogEntry("OTA failed: Error ending update - " + String(Update.errorString()));
    } else {
       addLogEntry("OTA update finished successfully.");
       Serial.println("[OTA] Update erfolgreich beendet!");
       Serial.println("[OTA] Neustart in 3 Sekunden...");
       addLogEntry("Rebooting after OTA.");
       delay(3000);
       ESP.restart();
    }
  } else {
     addLogEntry("OTA download failed: HTTP " + String(code) + " " + http.errorToString(code));
  }
  http.end();
}


// --------------------------------------------------------------
// Deep Sleep Konfiguration
// --------------------------------------------------------------
void configureDeepSleep() {
  Serial.println("[DEEPSLEEP] Konfiguriere Deep Sleep...");

  esp_err_t ext0_result = esp_sleep_enable_ext0_wakeup(GPIO_NUM_27, 1); // 1 = Wake on HIGH
  if (ext0_result != ESP_OK) {
      addLogEntry("Failed to configure EXT0 wakeup: " + String(esp_err_to_name(ext0_result)));
  }

  uint64_t sleepTimeUs = (uint64_t)keepAliveInterval * 1000ULL;
  esp_err_t timer_result = esp_sleep_enable_timer_wakeup(sleepTimeUs);
   if (timer_result != ESP_OK) {
      addLogEntry("Failed to configure Timer wakeup: " + String(esp_err_to_name(timer_result)));
   }

  Serial.println("[DEEPSLEEP] Gehe jetzt schlafen...");
  Serial.flush();
  delay(100);
  esp_deep_sleep_start();
  Serial.println("[DEEPSLEEP] Dieser Text sollte NIE erscheinen!");
}
