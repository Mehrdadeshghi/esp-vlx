/************************************************************
   Minimaler Beispielcode für LILYGO® TTGO T-Call (SIM800L)
   - Sendet den PIN an das Modem
   - Baut eine GPRS-Verbindung auf (APN = internet.telekom)
   - Führt einen einfachen HTTP-GET durch
   - Gibt die Antwort auf dem seriellen Monitor aus

   Benötigt:
   - TinyGSM-Bibliothek
   - Arduino Core für ESP32
************************************************************/

// -----------------------------------------------------------
// 1) Modemtyp definieren (WICHTIG für TinyGSM)
// -----------------------------------------------------------
#define TINY_GSM_MODEM_SIM800

// -----------------------------------------------------------
// 2) Bibliotheken einbinden
// -----------------------------------------------------------
#include <TinyGsmClient.h>
#include <HardwareSerial.h>

// -----------------------------------------------------------
// 3) PIN, APN & Credentials anpassen
// -----------------------------------------------------------
// Bei einer Telekom-SIM kann APN = "internet.telekom" (oder "internet.t-d1.de") sein.
// Benutzername/Passwort oft leer. Prüfe die Angaben deines Tarifs!
const char* SIM_PIN   = "8843";              // <-- Deine SIM-PIN eintragen
const char* APN       = "internet.telekom";  // <-- Telekom-APN ggf. anpassen
const char* APN_USER  = "";                 // meist leer
const char* APN_PASS  = "";                 // meist leer

// -----------------------------------------------------------
// 4) Pins für TTGO T-Call (V1.4) festlegen
// -----------------------------------------------------------
#define MODEM_PWRKEY   4
#define MODEM_POWER_ON 23
#define MODEM_TX       27
#define MODEM_RX       26

// Serielle Konsole (Debug)
#define SerialMon Serial

// Serielle Schnittstelle für das SIM800L-Modem
HardwareSerial SerialAT(1);
TinyGsm        modem(SerialAT);

// -----------------------------------------------------------
// Modem einschalten (PWRKEY-Sequenz, etc.)
// -----------------------------------------------------------
void modemPowerOn() {
  pinMode(MODEM_PWRKEY, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);

  // Modul mit Strom versorgen
  digitalWrite(MODEM_POWER_ON, HIGH);
  delay(100);

  // PWRKEY kurz auf HIGH -> LOW -> HIGH
  digitalWrite(MODEM_PWRKEY, HIGH);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, LOW);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, HIGH);
}

// -----------------------------------------------------------
// setup()
// -----------------------------------------------------------
void setup() {
  // Serielle Schnittstelle für Debug-Meldungen
  SerialMon.begin(115200);
  delay(10);
  SerialMon.println("Starte TTGO T-Call mit SIM800L...");

  // GSM-Modem einschalten
  modemPowerOn();

  // Seriellen Port fürs Modem initialisieren
  // Standard-Baudrate beim SIM800L: 115200
  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);

  // Kurz warten, bis das Modem hochgefahren ist
  delay(3000);

  // Teste, ob das Modem auf AT-Befehle reagiert
  SerialMon.println("Teste AT-Kommunikation...");
  if (!modem.testAT()) {
    SerialMon.println("Keine Antwort vom Modem. Bitte Verkabelung/Baudrate prüfen.");
    while (true) { /* Endlosschleife */ }
  }
  SerialMon.println("Modem antwortet auf AT-Befehle.");

  // ---------------------------------------------------------
  // SIM-PIN senden (falls die SIM-Karte einen aktiven PIN hat)
  // ---------------------------------------------------------
  if (SIM_PIN && SIM_PIN[0] != '\0') {
    SerialMon.print("Sende PIN: ");
    SerialMon.println(SIM_PIN);

    // PIN per AT+CPIN="xxxx" senden
    modem.sendAT(String("AT+CPIN=\"") + SIM_PIN + "\"");
    if (modem.waitResponse(10000L) != 1) {
      SerialMon.println("PIN-Eingabe fehlgeschlagen oder Timeout.");
      // Hier ggf. Abbruch oder Wiederholung
    } else {
      SerialMon.println("PIN akzeptiert. Warte auf SIM-Registrierung...");
    }

    // Warten, bis SIM 'READY' ist
    bool simReady = false;
    for (int i = 0; i < 10; i++) {
      modem.sendAT("AT+CPIN?");
      String res = modem.stream.readStringUntil('\n');
      if (res.indexOf("READY") != -1) {
        simReady = true;
        break;
      }
      delay(1000);
    }
    if (!simReady) {
      SerialMon.println("SIM wird nicht READY. Prüfe PIN oder SIM-Karte.");
    } else {
      SerialMon.println("SIM ist READY.");
    }
  } else {
    SerialMon.println("Keine PIN nötig oder PIN deaktiviert.");
  }

  // ---------------------------------------------------------
  // GPRS-Verbindung herstellen
  // ---------------------------------------------------------
  SerialMon.println("Starte GPRS...");
  modem.gprsConnect(APN, APN_USER, APN_PASS);

  // Warte, bis GPRS connected ist
  while (!modem.isGprsConnected()) {
    SerialMon.print(".");
    delay(500);
  }
  SerialMon.println("\nGPRS verbunden!");

  // ---------------------------------------------------------
  // IP-Adresse anzeigen (Achtung: IPAddress statt String!)
  // ---------------------------------------------------------
  IPAddress ip = modem.localIP();   // -> gibt IPAddress zurück
  SerialMon.print("Lokale IP: ");
  SerialMon.println(ip);            // automatische Ausgabe als 192.168.x.x

  // ---------------------------------------------------------
  // Einfacher HTTP-Request zum Test (HTTP, unverschlüsselt)
  // ---------------------------------------------------------
  TinyGsmClient client(modem);
  const char* testHost = "httpbin.org";
  const int   testPort = 80;

  SerialMon.println("Verbinde zu httpbin.org...");
  if (!client.connect(testHost, testPort)) {
    SerialMon.println("Verbindung fehlgeschlagen!");
    return;
  }

  // HTTP-Anfrage (GET)
  client.print(String("GET /get HTTP/1.1\r\n") +
               "Host: " + testHost + "\r\n" +
               "Connection: close\r\n\r\n");

  // Antwort lesen
  unsigned long timeout = millis();
  while (client.connected() && (millis() - timeout < 5000)) {
    while (client.available()) {
      String line = client.readStringUntil('\n');
      SerialMon.println(line);
      timeout = millis();  // Timeout zurücksetzen, wenn Daten eintreffen
    }
  }
  client.stop();
  SerialMon.println("HTTP-Request beendet.");
}

// -----------------------------------------------------------
// loop()
// -----------------------------------------------------------
void loop() {
  // Hauptschleife – ggf. Deep-Sleep, MQTT, weitere Aufgaben...
  // Nichts mehr zu tun in diesem Beispiel.
}
