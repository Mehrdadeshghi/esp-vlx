#define TINY_GSM_DEBUG Serial
#define TINY_GSM_DEBUG_LEVEL 1
// Modem-Typ definieren
#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>
#include <Wire.h>
#include <SPI.h>



// Pin-Definitionen
#define MODEM_RST       5
#define MODEM_PWRKEY    4
#define MODEM_POWER_ON  23
#define MODEM_TX        27
#define MODEM_RX        26
#define I2C_SDA         21
#define I2C_SCL         22
#define MODEM_BAUD_RATE 115200  // 115.2 Kb/s Baudrate

// APN Einstellungen für Vodafone
const char apn[]  = "event.vodafone.de"; // Vodafone APN
const char user[] = "";
const char pass[] = "";

// SIM-PIN, falls erforderlich (leer lassen, wenn nicht benötigt)
const char simPIN[] = ""; // Beispiel: "1234"

// Initialisierung der seriellen Kommunikation
TinyGsm modem(Serial1);
TinyGsmClient client(modem);

void testAT() {
  Serial.println("Sende AT Befehl...");
  modem.sendAT("+CSQ"); // Signalqualität abfragen
  delay(1000);
  while (Serial1.available()) {
    String response = Serial1.readStringUntil('\n');
    Serial.println(response);
  }
}

void testAdditionalATCommands() {
  Serial.println("Sende AT+CREG? (Netzwerkregistrierung)");
  modem.sendAT("+CREG?");
  delay(1000);
  while (Serial1.available()) {
    String response = Serial1.readStringUntil('\n');
    Serial.println(response);
  }

  Serial.println("Sende AT+CGATT? (GPRS Attachment Status)");
  modem.sendAT("+CGATT?");
  delay(1000);
  while (Serial1.available()) {
    String response = Serial1.readStringUntil('\n');
    Serial.println(response);
  }
}

void setup() {
  // Serielle Monitore starten
  Serial.begin(115200);
  delay(10);
  
  // Initialisierung der Modem-Pins
  pinMode(MODEM_PWRKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  
  // Setzen der Modem-Pins in den Standardzustand
  digitalWrite(MODEM_PWRKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);
  
  // Kurzer Reset des Modems
  digitalWrite(MODEM_RST, LOW);
  delay(100);
  digitalWrite(MODEM_RST, HIGH);
  delay(1000);
  
  // Serielle Verbindung zum Modem starten
  Serial1.begin(MODEM_BAUD_RATE, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(3000); // Wartezeit für das Modem zum Starten
  
  Serial.println("Starte das Modem...");
  
  // Modem neustarten
  modem.restart();
  delay(1000);
  
  // Test AT-Befehl
  testAT();
  
  // Zusätzliche AT-Befehle testen
  testAdditionalATCommands();
  
  // Überprüfen, ob SIM entsperrt ist
  if (modem.getSimStatus() != 3) { // 3 bedeutet, SIM ist entsperrt
    Serial.println("SIM ist gesperrt, versuche zu entsperren...");
    if (modem.simUnlock(simPIN)) {
      Serial.println("SIM entsperrt");
    } else {
      Serial.println("SIM Entsperrung fehlgeschlagen");
      return;
    }
  } else {
    Serial.println("SIM ist bereits entsperrt");
  }

  // Überprüfen, ob das Modem mit dem Netzwerk verbunden ist
  Serial.print("Verbinde mit dem Netzwerk...");
  if (!modem.waitForNetwork()) {
    Serial.println("Verbindung zum Netzwerk fehlgeschlagen");
    return;
  }
  Serial.println("Netzwerk verbunden");
  
  // APN konfigurieren und GPRS verbinden
  Serial.print("Verbinde mit APN: ");
  Serial.println(apn);
  if (!modem.gprsConnect(apn, user, pass)) {
    Serial.println("Verbindung zum GPRS-Netzwerk fehlgeschlagen");
    return;
  }
  Serial.println("GPRS verbunden");
  
  // IP-Adresse anzeigen
  String ip = modem.getLocalIP();
  Serial.print("IP Adresse: ");
  Serial.println(ip);
}

void loop() {
  // Hier können weitere Aktionen durchgeführt werden
}
