/******************************************************
 * TTGO T-Call V1.4 – Briefkasten-Logic mit VL53L0X
 * und PIR-Sensor. Datenübertragung per SIM-Karte
 * (NUR via SAPBR – kein CIP/CIICR/CIFSR)!
 ******************************************************/

#include <HardwareSerial.h>
#include <Wire.h>
#include <Adafruit_VL53L0X.h>
#include <Preferences.h>
#include <vector>
#include <numeric>
#include <esp_sleep.h>

// ====================== SIM800L-Pins TTGO T-Call V1.4 ======================
#define MODEM_TX         27   // TXD des SIM800L → ESP32 GPIO27
#define MODEM_RX         26   // RXD des SIM800L → ESP32 GPIO26
#define MODEM_PWRKEY     4    // PWRKEY-Pin des SIM800L
#define MODEM_POWER_ON   23   // Power-Enable-Pin des SIM800L
#define LED_PIN          13   // LED auf dem TTGO-Board

// ====================== Weitere Hardware-Pins ==============================
#define PIR_PIN          33   // PIR-Sensor (RTC-fähiger Pin!)
#define RESET_BUTTON_PIN 0    // Reset-Taster (falls verfügbar)

// ====================== SIM800L-Einstellungen ==============================
#define MODEM_BAUD       115200
// Hier den APN anpassen – in Deinem Fall scheint "web.vodafone.de" (ohne SSL) zu funktionieren:
const char* APN         = "web.vodafone.de";
const char* APN_USER    = "";  // falls erforderlich
const char* APN_PASS    = "";  // falls erforderlich

// ====================== Server-Endpunkte ===================================
const char* registrationServerUrl = "http://45.195.250.247:8002/device";
const char* calibrationServerUrl  = "http://45.195.250.247:8002/calibration";
const char* letterServerUrl       = "http://45.195.250.247:8002/letter";
const char* doorServerUrl         = "http://45.195.250.247:8002/door";
const char* keepaliveServerUrl    = "http://45.195.250.247:8002/keepalive";

// ====================== Globale Variablen =================================
Preferences preferences;
Adafruit_VL53L0X lox;

// Kalibrierwerte
int minDistance = 0;
int maxDistance = 0;

// Keep-Alive
unsigned long lastKeepAlive = 0;
const unsigned long keepAliveInterval = 15 * 60 * 1000; // 15 Minuten in ms

// SIM800L über UART1 ansteuern
HardwareSerial sim800(1);

// -------------------------------------------------------------
// Hilfsfunktionen für AT-Befehle und GPRS (SAPBR)
// -------------------------------------------------------------

// Sende AT-Befehl und sammle Antwort
String sendAT(const String& cmd, uint32_t timeout = 2000) {
  sim800.println(cmd);
  unsigned long start = millis();
  String resp = "";
  while (millis() - start < timeout) {
    while (sim800.available()) {
      char c = sim800.read();
      resp += c;
    }
    delay(10);
  }
  Serial.println(">> " + resp);
  return resp;
}

// Liest, bis der Ziel-String gefunden wurde
bool readUntil(const String& target, uint32_t timeout, String& response) {
  unsigned long start = millis();
  response = "";
  while (millis() - start < timeout) {
    while (sim800.available()) {
      char c = sim800.read();
      response += c;
      if (response.indexOf(target) != -1) {
        return true;
      }
    }
    delay(10);
  }
  return false;
}

// Schaltet das SIM800L ein (PWRKEY-Sequenz + POWER_ON-Pin)
void powerOnSIM800L() {
  Serial.println("[MODEM] Schalte SIM800L ein...");
  pinMode(MODEM_POWER_ON, OUTPUT);
  pinMode(MODEM_PWRKEY, OUTPUT);

  digitalWrite(MODEM_POWER_ON, HIGH);
  delay(100);
  digitalWrite(MODEM_PWRKEY, LOW);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, HIGH);
  delay(4000);
}

// Wartet auf Netzregistrierung (AT+CREG? muss 0,1 oder 0,5 zurückliefern)
bool waitForNetworkRegistration(uint32_t timeout = 60000) {
  Serial.println("[GPRS] Warte auf Netzregistrierung...");
  unsigned long start = millis();
  while (millis() - start < timeout) {
    String resp = sendAT("AT+CREG?", 2000);
    if (resp.indexOf("+CREG: 0,1") != -1 || resp.indexOf("+CREG: 0,5") != -1) {
      Serial.println("[GPRS] Netz registriert.");
      return true;
    }
    delay(2000);
  }
  Serial.println("[GPRS] Netzregistrierung fehlgeschlagen.");
  return false;
}

// Baut GPRS-Internet-Verbindung über SAPBR auf (nur SAPBR, kein CIP)
bool openInternetConnection() {
  Serial.println("[GPRS] Starte Internet-Verbindung (SAPBR)...");
  // Beende ggf. alte Sessions
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+CIPSHUT", 3000);

  // Konfiguriere den Bearer: CONTYPE, APN, USER, PWD
  sendAT("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"", 1000);
  sendAT("AT+SAPBR=3,1,\"APN\",\"" + String(APN) + "\"", 1000);
  if (strlen(APN_USER) > 0) {
    sendAT("AT+SAPBR=3,1,\"USER\",\"" + String(APN_USER) + "\"", 1000);
  }
  if (strlen(APN_PASS) > 0) {
    sendAT("AT+SAPBR=3,1,\"PWD\",\"" + String(APN_PASS) + "\"", 1000);
  }

  // Bearer aktivieren
  String resp = sendAT("AT+SAPBR=1,1", 6000);
  if (resp.indexOf("OK") == -1) {
    Serial.println("[GPRS] ❌ Konnte SAPBR nicht öffnen!");
    return false;
  }
  // IP abfragen
  resp = sendAT("AT+SAPBR=2,1", 2000);
  if (resp.indexOf("+SAPBR: 1,1") == -1) {
    Serial.println("[GPRS] ❌ Keine IP erhalten?");
    return false;
  }
  Serial.println("[GPRS] ✅ SAPBR-Verbindung aktiv.");
  return true;
}

// Beendet die GPRS-Verbindung via SAPBR
void closeInternetConnection() {
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+SAPBR=0,1", 3000);
  sendAT("AT+CIPSHUT", 3000);
  Serial.println("[GPRS] Verbindung beendet.");
}

// -------------------------------------------------------------
// Funktionen zum Senden von Daten (HTTP POST / GET)
// -------------------------------------------------------------

// Sendet per HTTP POST eine JSON-Payload an einen Server
bool sendHttpPOST(const String& serverUrl, const String& jsonPayload, int maxRetries = 3) {
  for (int attempt = 1; attempt <= maxRetries; attempt++) {
    Serial.printf("[HTTP] POST Versuch %d von %d\n", attempt, maxRetries);
    if (sendSingleHttpPOST(serverUrl, jsonPayload)) {
      return true;
    }
    delay(2000);
  }
  return false;
}

bool sendSingleHttpPOST(const String& serverUrl, const String& jsonPayload) {
  if (!waitForNetworkRegistration()) {
    Serial.println("[HTTP] ❌ Netz nicht registriert. Abbruch.");
    return false;
  }
  if (!openInternetConnection()) {
    Serial.println("[HTTP] ❌ Konnte keine GPRS-Verbindung öffnen.");
    return false;
  }

  // HTTP-Sitzung initialisieren
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+HTTPINIT", 1000);

  // HTTP-Parameter setzen
  sendAT("AT+HTTPPARA=\"CID\",1", 500);
  sendAT("AT+HTTPSSL=0", 500); // Nur HTTP
  sendAT("AT+HTTPPARA=\"URL\",\"" + serverUrl + "\"", 1000);
  sendAT("AT+HTTPPARA=\"CONTENT\",\"application/json\"", 500);

  // JSON-Payload vorbereiten
  int length = jsonPayload.length();
  Serial.printf("[HTTP] Sende %d Bytes an %s\n", length, serverUrl.c_str());

  String httpDataCmd = "AT+HTTPDATA=" + String(length) + ",15000";
  String resp = sendAT(httpDataCmd, 3000);

  if (resp.indexOf("DOWNLOAD") == -1) {
    Serial.println("[HTTP] ❌ HTTPDATA-Fehler.");
    sendAT("AT+HTTPTERM", 500);
    closeInternetConnection();
    return false;
  }

  delay(300);
  sim800.write(jsonPayload.c_str(), length);
  delay(500);

  // HTTP POST ausführen
  sendAT("AT+HTTPACTION=1", 2000);
  Serial.println("[HTTP] HTTP-POST gesendet. Warte auf Antwort...");
  
  // Auf Antwort warten
  String actionResp = "";
  bool success = readUntil("+HTTPACTION: 1,", 20000, actionResp);

  if (success) {
    int statusCode = actionResp.substring(actionResp.indexOf("+HTTPACTION: 1,") + 14, actionResp.indexOf(",", actionResp.indexOf("+HTTPACTION: 1,") + 14)).toInt();

    if (statusCode == 200 || statusCode == 201) {
      Serial.printf("[HTTP] ✅ HTTP-POST erfolgreich! (Status %d)\n", statusCode);
    } else {
      Serial.printf("[HTTP] ❌ Fehlerhafte HTTP-Antwort: %d\n", statusCode);
    }
  } else {
    Serial.println("[HTTP] ❌ Keine Antwort erhalten.");
  }

  // Server-Antwort lesen
  resp = sendAT("AT+HTTPREAD", 5000);
  Serial.println("[HTTP] Server-Antwort:\n" + resp);

  // HTTP beenden, GPRS schließen
  sendAT("AT+HTTPTERM", 500);
  closeInternetConnection();
  Serial.println("[HTTP] ✅ POST erfolgreich gesendet.");
  return true;
}


// Optional: HTTP GET (hier nicht zwingend benötigt)
bool sendHttpGET(const String& serverUrl, int maxRetries = 3) {
  for (int attempt = 1; attempt <= maxRetries; attempt++) {
    Serial.printf("[HTTP GET] Versuch %d von %d\n", attempt, maxRetries);
    if (sendSingleHttpGET(serverUrl)) {
      return true;
    }
    delay(2000);
  }
  return false;
}

bool sendSingleHttpGET(const String& serverUrl) {
  if (!waitForNetworkRegistration()) {
    Serial.println("[HTTP GET] ❌ Netz nicht registriert. Abbruch.");
    return false;
  }
  if (!openInternetConnection()) {
    Serial.println("[HTTP GET] ❌ Konnte keine GPRS-Verbindung öffnen.");
    return false;
  }
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+HTTPINIT", 1000);
  sendAT("AT+HTTPPARA=\"CID\",1", 500);
  sendAT("AT+HTTPSSL=0", 500);
  sendAT("AT+HTTPPARA=\"URL\",\"" + serverUrl + "\"", 1000);
  sendAT("AT+HTTPACTION=0", 1000);
  Serial.println("[HTTP GET] HTTP-Aktion (GET) gesendet. Warte auf Antwort...");
  delay(1000);
  String actionResp = "";
  bool success = readUntil("+HTTPACTION: 0,200", 15000, actionResp);
  if (success) {
    Serial.println("[HTTP GET] ✅ HTTP-GET erfolgreich.");
  }
  else {
    Serial.println("[HTTP GET] ❌ HTTP-GET fehlgeschlagen oder nicht 200.");
    String fullResp = "";
    readUntil("\r\n", 2000, fullResp);
    Serial.println("[HTTP GET] Vollständige HTTP-Antwort:");
    Serial.println(fullResp);
    sendAT("AT+HTTPTERM", 500);
    closeInternetConnection();
    return false;
  }
  String resp = sendAT("AT+HTTPREAD", 2000);
  Serial.println("[HTTP GET] Server-Antwort:\n" + resp);
  sendAT("AT+HTTPTERM", 500);
  closeInternetConnection();
  Serial.println("[HTTP GET] ✅ GET erfolgreich gesendet.");
  return true;
}

// -------------------------------------------------------------
// VL53L0X Funktionen (Kalibrierung, Messung, Ereigniserkennung)
// -------------------------------------------------------------
void calibrateVL53L0X() {
  Serial.println("[CALIBRATION] Initialisiere VL53L0X...");
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  unsigned long startTime = millis();
  unsigned long duration = 3000; // 3 Sekunden messen
  int currentMin = 9999;
  int currentMax = 0;
  Serial.println("[CALIBRATION] Messe 3 Sekunden...");
  while (millis() - startTime < duration) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      if (distance < currentMin) currentMin = distance;
      if (distance > currentMax) currentMax = distance;
      Serial.printf("[CAL] Distanz: %d mm\n", distance);
    }
    else {
      Serial.println("[CAL] Ungültige Messung...");
    }
    delay(50);
  }
  if (currentMin < 9999 && currentMax > 0) {
    minDistance = currentMin - 15;
    maxDistance = currentMax + 15;
    preferences.putInt("minDistance", minDistance);
    preferences.putInt("maxDistance", maxDistance);
    Serial.printf("[CAL DONE] Min: %d mm, Max: %d mm\n", minDistance, maxDistance);
  }
  else {
    Serial.println("[ERROR] Kalibrierung fehlgeschlagen!");
  }
}

void measureForFiveSeconds() {
  Serial.println("[MEASURE] Starte 5-Sekunden-Messung...");
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  lox.setMeasurementTimingBudgetMicroSeconds(20000);
  unsigned long startTime = millis();
  std::vector<int> distanceBuffer;
  int invalidCount = 0;
  while (millis() - startTime < 5000) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      distanceBuffer.push_back(distance);
      Serial.printf("[MEAS] Distanz: %d mm\n", distance);
    }
    else {
      Serial.println("[MEAS] Ungültig...");
      invalidCount++;
    }
    delay(20);
  }
  if (distanceBuffer.empty()) {
    Serial.println("[MEAS] Keine gültigen Messwerte.");
    return;
  }
  int minValue = *std::min_element(distanceBuffer.begin(), distanceBuffer.end());
  int maxValue = *std::max_element(distanceBuffer.begin(), distanceBuffer.end());
  int averageValue = std::accumulate(distanceBuffer.begin(), distanceBuffer.end(), 0)
                     / (int)distanceBuffer.size();
  Serial.printf("[ANALYSE] Min: %d, Max: %d, Avg: %d\n", minValue, maxValue, averageValue);
  bool briefErkannt    = (minValue < minDistance);
  bool kastenGeoeffnet = (maxValue > maxDistance);
  if (briefErkannt) {
    Serial.printf("[EVENT] Brief erkannt (minDist=%d)\n", minValue);
    sendLetterEvent(minValue);
  }
  else if (kastenGeoeffnet) {
    Serial.printf("[EVENT] Tür geöffnet (maxDist=%d)\n", maxValue);
    sendDoorEvent(maxValue);
  }
  else {
    Serial.println("[INFO] Kein Ereignis erkannt.");
  }
}

// -------------------------------------------------------------
// Server-Aufrufe (Daten versenden via SIM-Karte)
// -------------------------------------------------------------
String getLocalMacAddress() {
  uint64_t chipid = ESP.getEfuseMac();
  char macStr[13];
  sprintf(macStr, "%04X%08X", (uint16_t)(chipid >> 32), (uint32_t)chipid);
  return String(macStr);
}

void sendDeviceInfo() {
  Serial.println("[DEBUG] -> sendDeviceInfo()");
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = String("{\"mac_address\":\"") + macAddress +
                   "\",\"firmware_version\":\"1.0.0\"}";
  Serial.println("[HTTP] Sende Device Info Payload:");
  Serial.println(payload);
  sendHttpPOST(registrationServerUrl, payload);
}

void sendCalibrationData() {
  Serial.println("[DEBUG] -> sendCalibrationData()");
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = "{\"mac_address\":\"" + macAddress +
                   "\",\"min_distance\":" + String(minDistance) +
                   ",\"max_distance\":" + String(maxDistance) + "}";
  Serial.println("[HTTP] Sende Calibration Data Payload:");
  Serial.println(payload);
  Serial.print("[HTTP] Payload Length: ");
  Serial.println(payload.length());
  sendHttpPOST(calibrationServerUrl, payload);
}

void sendLetterEvent(int distance) {
  Serial.println("[DEBUG] -> sendLetterEvent()");
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = String("{\"mac_address\":\"") + macAddress +
                   "\",\"event\":\"letter_detected\",\"distance\":" +
                   String(distance) + "}";
  Serial.println("[HTTP] Sende Letter Event Payload:");
  Serial.println(payload);
  Serial.print("[HTTP] Payload Length: ");
  Serial.println(payload.length());
  sendHttpPOST(letterServerUrl, payload);
}

void sendDoorEvent(int distance) {
  Serial.println("[DEBUG] -> sendDoorEvent()");
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = String("{\"mac_address\":\"") + macAddress +
                   "\",\"event\":\"door_opened\",\"distance\":" +
                   String(distance) + "}";
  Serial.println("[HTTP] Sende Door Event Payload:");
  Serial.println(payload);
  Serial.print("[HTTP] Payload Length: ");
  Serial.println(payload.length());
  sendHttpPOST(doorServerUrl, payload);
}

void sendKeepAlive() {
  Serial.println("[DEBUG] -> sendKeepAlive()");
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = String("{\"mac_address\":\"") + macAddress + "\"}";
  Serial.println("[HTTP] Sende Keep Alive Payload:");
  Serial.println(payload);
  Serial.print("[HTTP] Payload Length: ");
  Serial.println(payload.length());
  bool success = sendHttpPOST(keepaliveServerUrl, payload);
  if (success) {
    Serial.println("[KEEPALIVE] ✅ Keep Alive erfolgreich gesendet.");
  } else {
    Serial.println("[KEEPALIVE] ❌ Keep Alive fehlgeschlagen.");
  }
}

// -------------------------------------------------------------
// Deep-Sleep-Konfiguration
// -------------------------------------------------------------
void configureDeepSleep() {
  Serial.println("[SLEEP] -> configureDeepSleep()");
  // Timer Wakeup aktivieren (Keep-Alive-Intervall)
  esp_sleep_enable_timer_wakeup((uint64_t)keepAliveInterval * 1000ULL);
  Serial.println("[SLEEP] Gehe in 5s in Deep Sleep...");
  delay(5000);
  Serial.println("[SLEEP] Jetzt Deep Sleep!");
  esp_deep_sleep_start();
}

/**
 * Prüft, ob der Reset-Taster (LOW) >= 2 Sekunden gedrückt wird.
 */
bool isResetButtonPressed() {
  const unsigned long debounceTime = 2000; 
  unsigned long pressedTime = 0;
  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    Serial.println("[INFO] Reset-Taster erkannt. Warte...");
    pressedTime = millis();
    while (digitalRead(RESET_BUTTON_PIN) == LOW) {
      delay(100);
      if (millis() - pressedTime > debounceTime) {
        Serial.println("[INFO] Reset-Taster >2s gedrückt.");
        return true;
      }
    }
  }
  return false;
}

// -------------------------------------------------------------
// SETUP & LOOP
// -------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  delay(200);
  Serial.println("\n=== TTGO T-Call (SAPBR-only) Start ===");

  // Pins initialisieren
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  pinMode(PIR_PIN, INPUT_PULLDOWN); // Interner Pull-Down
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);

  // Preferences initialisieren
  preferences.begin("briefkasten", false);

  // SIM800L einschalten
  powerOnSIM800L();
  sim800.begin(MODEM_BAUD, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(2000);

  // Test-AT-Befehl
  String resp = sendAT("AT", 2000);
  if (resp.indexOf("OK") == -1) {
    Serial.println("[MODEM] ❌ Keine Antwort vom Modem. Bitte Stromversorgung prüfen.");
  }
  else {
    Serial.println("[MODEM] ✅ Modem reagiert.");
  }

  // Netzwerkmodus setzen (nur 2G/GSM)
  sendAT("AT+CNMP=2", 1000);
  sendAT("AT+CMNB=0", 1000);

  // Einzigartige ID in Preferences prüfen/speichern
  String storedMac = preferences.getString("mac_address", "");
  if (storedMac.isEmpty()) {
    String newMac = getLocalMacAddress();
    preferences.putString("mac_address", newMac);
    Serial.println("[INFO] Neue MAC/ID abgespeichert: " + newMac);
  }
  else {
    Serial.println("[INFO] MAC/ID bereits vorhanden: " + storedMac);
  }

  // Debug: Signalstärke, Netzregistrierung, SIM-Status
  Serial.println("[DEBUG] Überprüfe Signalstärke:");
  String csq = sendAT("AT+CSQ", 2000);
  Serial.println(csq);
  Serial.println("[DEBUG] Überprüfe Netzregistrierung (CREG):");
  String creg = sendAT("AT+CREG?", 2000);
  Serial.println(creg);
  Serial.println("[DEBUG] Überprüfe GPRS-Registrierung (CGREG):");
  String cgreg = sendAT("AT+CGREG?", 2000);
  Serial.println(cgreg);
  Serial.println("[DEBUG] Überprüfe SIM-Status:");
  String cpin = sendAT("AT+CPIN?", 2000);
  Serial.println(cpin);

  // Prüfe Wakeup-Grund
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();
  Serial.printf("[WAKEUP] wakeup_reason: %d\n", wakeup_reason);

  if (wakeup_reason == ESP_SLEEP_WAKEUP_EXT1) {
    // Aufwachen durch PIR
    Serial.println("============================================");
    Serial.println("[WAKEUP] Durch PIR (ext1) aufgewacht!");
    minDistance = preferences.getInt("minDistance", 0);
    maxDistance = preferences.getInt("maxDistance", 0);
    Serial.printf("[INFO] Geladene Kalibrierung: min=%d, max=%d\n", minDistance, maxDistance);
    if (minDistance == 0 || maxDistance == 0) {
      Serial.println("[ERROR] Keine Kalibrierung! Starte Kalibrierung...");
      calibrateVL53L0X();
    }
    measureForFiveSeconds();
    configureDeepSleep();
  }
  else if (wakeup_reason == ESP_SLEEP_WAKEUP_TIMER) {
    // Aufwachen durch Timer → Keep-Alive
    Serial.println("============================================");
    Serial.println("[WAKEUP] Durch Timer (Keep-Alive) aufgewacht!");
    delay(2000);
    sendKeepAlive();
    configureDeepSleep();
  }
  else {
    // Normaler Start (Power On / Reset)
    Serial.println("============================================");
    Serial.println("[START] Power On oder Reset.");
    bool resetRequested = isResetButtonPressed();
    if (resetRequested) {
      Serial.println("[INFO] Reset-Taster wurde lange gedrückt.");
    }
    String macAddress = preferences.getString("mac_address", "Unbekannt");
    Serial.println("[INFO] MAC/ID: " + macAddress);
    sendDeviceInfo();
    Serial.println("[INFO] Starte Kalibrierung in 3s...");
    delay(3000);
    calibrateVL53L0X();
    sendCalibrationData();
    configureDeepSleep();
  }
}

void loop() {
  // Der Loop wird nicht erreicht, da der ESP32 im Deep Sleep endet.
}
