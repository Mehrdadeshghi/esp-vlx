#include <WiFi.h>             // WLAN-Bibliothek für ESP32
#include <HTTPClient.h>       // HTTP-Client für Anfragen
#include <Wire.h>
#include <Adafruit_VL53L0X.h>
#include <Preferences.h>      // Für NVS-Speicherung

// WLAN-Zugangsdaten
const char* ssid = "Eshghi2,4";         // WLAN-SSID
const char* password = "SabziPolo";     // WLAN-Passwort

// Server-Konfiguration
const char* registrationServerUrl = "http://45.195.250.247:8002/post";  // Server-URL

// Pin-Definitionen
#define PIR_PIN 27  // PIR-Sensor Output Pin
#define LED_PIN 2   // Status-LED (optional)

// VL53L0X Instanz
Adafruit_VL53L0X lox;
Preferences preferences; // Für Speicherung von Min/Max

// Globale Variablen
int minDistance = 0;
int maxDistance = 0;

void setup() {
  // GPIO-Konfiguration für PIR und LED
  pinMode(PIR_PIN, INPUT);     // PIR-Sensor als Eingang
  pinMode(LED_PIN, OUTPUT);    // LED als Ausgang
  digitalWrite(LED_PIN, LOW);  // LED ausschalten

  // Serielle Kommunikation starten
  Serial.begin(115200);
  delay(50); // Minimaler Delay für die serielle Konsole

  preferences.begin("briefkasten", false); // Speicher initialisieren

  // WLAN-Verbindung herstellen
  connectToWiFi();

  // Wakeup-Grund überprüfen
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();
  
  if (wakeup_reason == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println("\n[WAKEUP] ESP32 wurde durch PIR-Bewegung aufgeweckt!");
    if (isPirSignalStable()) { // Überprüfen, ob das PIR-Signal stabil ist
      handleWakeup(); // Wakeup-Ereignis verarbeiten
    } else {
      Serial.println("[INFO] PIR-Signal war instabil. Zurück in Deep Sleep...");
    }
  } else {
    Serial.println("[INFO] Normaler Neustart. Starte Kalibrierung...");
    calibrateVL53L0X(); // Kalibrierung durchführen
  }

  // Deep Sleep konfigurieren
  configureDeepSleep();
}

void loop() {
  // Der Code im Loop wird nicht verwendet, da wir Deep Sleep nutzen.
}

void connectToWiFi() {
  Serial.printf("[WIFI] Verbinde mit WLAN: %s\n", ssid);
  WiFi.begin(ssid, password); // WLAN-Verbindung starten

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED && retries < 20) {
    delay(500);
    Serial.print(".");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.printf("\n[WIFI] Erfolgreich verbunden! IP-Adresse: %s\n", WiFi.localIP().toString().c_str());
  } else {
    Serial.println("\n[WIFI] Verbindung fehlgeschlagen. Neustart...");
    ESP.restart(); // Neustart bei Verbindungsfehler
  }
}

bool isPirSignalStable() {
  // Prüft, ob das PIR-Signal für mindestens 300 ms stabil bleibt
  const int stableTime = 300; // Zeit, die das Signal stabil sein muss (in ms)
  unsigned long stableStart = millis();

  while (digitalRead(PIR_PIN) == HIGH) {
    if (millis() - stableStart > stableTime) { // Signal ist stabil
      return true;
    }
    delay(10); // Kurz warten zwischen Prüfungen
  }

  return false; // Signal war nicht stabil
}

void calibrateVL53L0X() {
  // VL53L0X initialisieren
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden. Bitte überprüfen Sie die Verbindung!");
    return;
  }
  Serial.println("[INFO] VL53L0X erfolgreich initialisiert.");

  unsigned long startTime = millis();
  unsigned long duration = 3000; // 3 Sekunden Kalibrierung

  int currentMin = 9999; // Hoher Startwert
  int currentMax = 0;    // Niedriger Startwert

  while (millis() - startTime < duration) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);

    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      if (distance < currentMin) currentMin = distance;
      if (distance > currentMax) currentMax = distance;

      Serial.printf("[CALIBRATION] Gemessene Distanz: %d mm\n", distance);
    }
    delay(50); // Kurz warten zwischen Messungen
  }

  // Min/Max-Werte speichern
  minDistance = currentMin;
  maxDistance = currentMax;

  preferences.putInt("minDistance", minDistance);
  preferences.putInt("maxDistance", maxDistance);

  Serial.printf("[CALIBRATION COMPLETE] Min: %d mm, Max: %d mm\n", minDistance, maxDistance);
}

void handleWakeup() {
  // Min/Max aus dem Speicher laden
  minDistance = preferences.getInt("minDistance", 0);
  maxDistance = preferences.getInt("maxDistance", 0);

  Serial.printf("[DEBUG] Geladene Werte - Min: %d mm, Max: %d mm\n", minDistance, maxDistance);

  if (minDistance == 0 || maxDistance == 0) {
    Serial.println("[ERROR] Kalibrierung fehlt. Neustart erforderlich!");
    return;
  }

  // VL53L0X initialisieren
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  Serial.println("[INFO] VL53L0X erfolgreich initialisiert.");

  // Messung durchführen
  VL53L0X_RangingMeasurementData_t measure;
  lox.rangingTest(&measure, false);

  if (measure.RangeStatus != 4) {
    int distance = measure.RangeMilliMeter;
    Serial.printf("[MEASUREMENT] Gemessene Distanz: %d mm\n", distance);

    if (distance < minDistance) {
      Serial.println("[POST] Post wurde erkannt!");
      sendToServer("POST erkannt"); // Nachricht an Server senden
    } else if (distance > maxDistance) {
      Serial.println("[OPEN] Briefkasten wurde geöffnet!");
      sendToServer("Briefkasten geöffnet"); // Nachricht an Server senden
    } else {
      Serial.println("[INFO] Keine Veränderung erkannt.");
    }
  } else {
    Serial.println("[WARNING] Fehler bei der Abstandsmessung.");
  }
}

void sendToServer(const char* message) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // URL direkt nutzen
    http.begin(registrationServerUrl);
    http.addHeader("Content-Type", "application/json");

    // JSON-Daten senden
    String jsonPayload = String("{\"message\": \"") + message + "\"}";
    int httpResponseCode = http.POST(jsonPayload);

    if (httpResponseCode > 0) {
      Serial.printf("[HTTP] Serverantwort: %d\n", httpResponseCode);
      String response = http.getString();
      Serial.printf("[HTTP] Serverantwort: %s\n", response.c_str());
    } else {
      Serial.printf("[HTTP] Anfrage fehlgeschlagen. Fehler: %s\n", http.errorToString(httpResponseCode).c_str());
    }

    http.end();
  } else {
    Serial.println("[HTTP] Keine WLAN-Verbindung. Nachricht nicht gesendet.");
  }
}

void configureDeepSleep() {
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_27, 1); // Wake-up bei HIGH-Signal von PIR
  Serial.println("[INFO] Konfiguration abgeschlossen. Gehe in Deep Sleep...");
  delay(100); // Kurzer Stabilisierungspuffer
  esp_deep_sleep_start();
}
