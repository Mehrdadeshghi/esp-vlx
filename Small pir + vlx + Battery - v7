#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_VL53L0X.h>
#include <Preferences.h>
#include <WiFiManager.h>
#include <vector>
#include <numeric>

// -------------------- BATTERIE-MESSUNG --------------------
#define MAX17043_ADDRESS 0x36
#define MAX_READINGS 10               // Anzahl der Werte fÃ¼r den Median-Filter
#define BATTERY_STABILIZATION_TIME 15000  // Wartezeit nach Aufwachen in Millisekunden (15 Sek.)

// -------------------- DEEP SLEEP ZEITEN --------------------
#define DEEP_SLEEP_TIME_SECONDS 60    // (Optional, hier wird aber im WiFi-Code Ã¼ber Timer gearbeitet)

// -------------------- SERVER-ENDPUNKTE --------------------
const char* registrationServerUrl = "http://45.195.250.247:8002/device";
const char* calibrationServerUrl  = "http://45.195.250.247:8002/calibration";
const char* letterServerUrl       = "http://45.195.250.247:8002/letter";
const char* doorServerUrl         = "http://45.195.250.247:8002/door";
const char* keepaliveServerUrl    = "http://45.195.250.247:8002/keepalive";

// -------------------- PIN-DEFINITIONEN --------------------
#define PIR_PIN 27          // PIR-Sensor Output Pin
#define LED_PIN 2           // Status-LED (optional)
#define RESET_BUTTON_PIN 0  // Reset-Taster (z.B. GPIO0)

// -------------------- VL53L0X --------------------
Adafruit_VL53L0X lox = Adafruit_VL53L0X();

// -------------------- PREFERENCES --------------------
Preferences preferences;

// -------------------- GLOBALE VARIABLEN FÃœR KALIBRIERUNG --------------------
int minDistance = 0;
int maxDistance = 0;

// -------------------- GLOBALE VARIABLEN FÃœR KEEPâ€‘ALIVE --------------------
unsigned long lastKeepAlive = 0;
const unsigned long keepAliveInterval = 60 * 60 * 1000; // 15 Minuten in Millisekunden

// -------------------- BATTERIE FUNKTIONEN --------------------

// Softâ€‘Reset des MAX17043
void resetMAX17043() {
  Serial.println("ðŸ”„ Soft-Reset des MAX17043...");
  Wire.beginTransmission(MAX17043_ADDRESS);
  Wire.write(0xFE);
  Wire.endTransmission();
  delay(1000);
}

// Spannung auslesen (optional, falls benÃ¶tigt)
float readVoltage() {
  Wire.beginTransmission(MAX17043_ADDRESS);
  Wire.write(0x02); // Register fÃ¼r Spannung
  Wire.endTransmission();
  Wire.requestFrom(MAX17043_ADDRESS, 2);
  
  uint16_t rawVoltage = (Wire.read() << 8) | Wire.read();
  return (rawVoltage >> 4) * 0.00125; // Umrechnung in Volt
}

// SoC (State of Charge) auslesen
float readSOC() {
  Wire.beginTransmission(MAX17043_ADDRESS);
  Wire.write(0x04); // Register fÃ¼r SoC
  Wire.endTransmission();
  Wire.requestFrom(MAX17043_ADDRESS, 2);
  
  uint16_t rawSOC = (Wire.read() << 8) | Wire.read();
  return rawSOC * 0.00390625; // Umrechnung in Prozent
}

// Medianâ€‘Filter fÃ¼r float Arrays
float getMedian(float readings[], int size) {
  float temp[size];
  for (int i = 0; i < size; i++) {
    temp[i] = readings[i];
  }
  for (int i = 0; i < size - 1; i++) {
    for (int j = i + 1; j < size; j++) {
      if (temp[j] < temp[i]) {
        float swap = temp[i];
        temp[i] = temp[j];
        temp[j] = swap;
      }
    }
  }
  return (size % 2 == 0) ? (temp[size / 2 - 1] + temp[size / 2]) / 2.0 : temp[size / 2];
}

// Ermittelt die BatteriekapazitÃ¤t (SoC) als Ganzzahl (Median aus mehreren Messungen)
int getBatteryPercentage() {
  float socValues[MAX_READINGS];
  // MAX17043 zurÃ¼cksetzen und Stabilisationszeit abwarten
  resetMAX17043();
  delay(BATTERY_STABILIZATION_TIME);
  
  Serial.println("ðŸ“Š Sammle SoCâ€‘Werte fÃ¼r Batteriestatus...");
  for (int i = 0; i < MAX_READINGS; i++) {
    socValues[i] = readSOC();
    delay(1000);
  }
  float medianSOC = getMedian(socValues, MAX_READINGS);
  int batteryPercent = (int)medianSOC;  // Nachkommastellen werden entfernt
  Serial.print("ðŸ”‹ Batteriestatus (Median, int): ");
  Serial.print(batteryPercent);
  Serial.println("%");
  return batteryPercent;
}

// -------------------- WIFI UND SERVER FUNKTIONEN --------------------

// Aufbau der WLANâ€‘Verbindung
void connectToWiFi() {
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("[WIFI] Bereits verbunden.");
    return;
  }
  
  Serial.println("[WIFI] Versuche, eine Verbindung mit gespeicherten WLANâ€‘Daten herzustellen...");
  WiFi.begin(); // Verbindet sich mit den gespeicherten Daten

  int retries = 0;
  const int maxRetries = 20;
  const int retryDelay = 500;
  
  while (WiFi.status() != WL_CONNECTED && retries < maxRetries) {
    delay(retryDelay);
    Serial.print(".");
    retries++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.printf("\n[WIFI] Erfolgreich verbunden! IP-Adresse: %s\n", WiFi.localIP().toString().c_str());
  } else {
    Serial.println("\n[WIFI] Verbindung fehlgeschlagen! Starte erneut...");
    WiFi.disconnect();
    WiFi.mode(WIFI_OFF);
    delay(1000);
    WiFi.mode(WIFI_STA);
    WiFi.begin();
    retries = 0;
    while (WiFi.status() != WL_CONNECTED && retries < maxRetries) {
      delay(retryDelay);
      Serial.print(".");
      retries++;
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.printf("\n[WIFI] Erfolgreich verbunden nach erneutem Versuch! IP-Adresse: %s\n", WiFi.localIP().toString().c_str());
    } else {
      Serial.println("\n[WIFI] Verbindung nach erneutem Versuch fehlgeschlagen!");
    }
  }
}

// Senden einer JSONâ€‘Nachricht an den Server
void sendToServer(const char* serverUrl, String jsonPayload) {
  Serial.println("--------------------------------------------");
  Serial.printf("[DEBUG] Sende POST an URL: %s\n", serverUrl);
  Serial.printf("[DEBUG] Payload: %s\n", jsonPayload.c_str());
  Serial.println("--------------------------------------------");
  
  connectToWiFi();
  
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");
    
    int httpResponseCode = http.POST(jsonPayload);
    if (httpResponseCode > 0) {
      String responseBody = http.getString();
      Serial.printf("[HTTP] Antwort-Code: %d\n", httpResponseCode);
      Serial.printf("[HTTP] Antwort-Body: %s\n", responseBody.c_str());
    } else {
      Serial.printf("[HTTP] Fehler beim Senden: %s\n", http.errorToString(httpResponseCode).c_str());
    }
    http.end();
  } else {
    Serial.println("[HTTP] WLAN-Verbindung fehlgeschlagen. Konnte nicht senden.");
  }
}

// Senden der GerÃ¤teinformationen an den Server
void sendDeviceInfo() {
  Serial.println("[DEBUG] -> sendDeviceInfo()");
  
  String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
  Serial.printf("[DEBUG] Lokale MAC-Adresse beim Registrieren: '%s'\n", macAddress.c_str());
  
  String jsonPayload = String("{\"mac_address\": \"") + macAddress +
                       "\", \"firmware_version\": \"1.0.0\"}";
  sendToServer(registrationServerUrl, jsonPayload);
}

// Senden der Kalibrierungsdaten an den Server
void sendCalibrationData() {
  Serial.println("[DEBUG] -> sendCalibrationData()");
  
  String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
  Serial.printf("[DEBUG] Lokale MAC-Adresse bei Kalibrierung: '%s'\n", macAddress.c_str());
  
  String jsonPayload = String("{\"mac_address\": \"") + macAddress +
                       "\", \"min_distance\": " + minDistance +
                       ", \"max_distance\": " + maxDistance + "}";
  sendToServer(calibrationServerUrl, jsonPayload);
}

// Senden eines Briefereignisses an den Server
void sendLetterEvent(int distance) {
  Serial.println("[DEBUG] -> sendLetterEvent()");
  
  String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
  Serial.printf("[DEBUG] Lokale MAC-Adresse beim Brief-Event: '%s'\n", macAddress.c_str());
  
  String jsonPayload = String("{\"mac_address\": \"") + macAddress +
                       "\", \"event\": \"letter_detected\", \"distance\": " + distance + "}";
  sendToServer(letterServerUrl, jsonPayload);
}

// Senden eines TÃ¼rÃ¶ffnungsereignisses an den Server
void sendDoorEvent(int distance) {
  Serial.println("[DEBUG] -> sendDoorEvent()");
  
  String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
  Serial.printf("[DEBUG] Lokale MAC-Adresse beim TÃ¼r-Event: '%s'\n", macAddress.c_str());
  
  String jsonPayload = String("{\"mac_address\": \"") + macAddress +
                       "\", \"event\": \"door_opened\", \"distance\": " + distance + "}";
  sendToServer(doorServerUrl, jsonPayload);
}

// Senden der Keepâ€‘Aliveâ€‘Daten an den Server inklusive Batteriestatus
void sendKeepAlive() {
  Serial.println("[DEBUG] -> sendKeepAlive()");
  
  String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
  Serial.printf("[DEBUG] Lokale MAC-Adresse beim KeepAlive: '%s'\n", macAddress.c_str());
  
  int batteryPercent = getBatteryPercentage();
  
  String jsonPayload = String("{\"mac_address\": \"") + macAddress +
                       "\", \"battery\": " + batteryPercent + "}";
  sendToServer(keepaliveServerUrl, jsonPayload);
}

// -------------------- VL53L0X UND KALIBRIERUNG --------------------

// PrÃ¼ft, ob der Resetâ€‘Taster gedrÃ¼ckt ist
bool isResetButtonPressed() {
  const unsigned long debounceTime = 2000; // 2 Sekunden
  unsigned long pressedTime = 0;
  
  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    Serial.println("[INFO] Resetâ€‘Taster erkannt. Starte Resetâ€‘Prozess.");
    pressedTime = millis();
    while (digitalRead(RESET_BUTTON_PIN) == LOW) {
      delay(100);
      if (millis() - pressedTime > debounceTime) {
        Serial.println("[INFO] Resetâ€‘Taster lange gedrÃ¼ckt. Setze WiFiâ€‘Daten zurÃ¼ck.");
        return true;
      }
    }
  }
  return false;
}

// Kalibrierung des VL53L0X
void calibrateVL53L0X() {
  Serial.println("[CALIBRATION] Initialisiere VL53L0X...");
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  
  unsigned long startTime = millis();
  unsigned long duration = 3000; // Kalibrierungsdauer: 3 Sekunden
  int currentMin = 9999;
  int currentMax = 0;
  
  Serial.println("[CALIBRATION] Messe fÃ¼r 3 Sekunden, um Min/Max zu ermitteln...");
  while (millis() - startTime < duration) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    
    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      if (distance < currentMin) currentMin = distance;
      if (distance > currentMax) currentMax = distance;
      Serial.printf("[CALIBRATION] Distanz: %d mm\n", distance);
    } else {
      Serial.println("[CALIBRATION WARNING] UngÃ¼ltige Messung wÃ¤hrend Kalibrierung.");
    }
    delay(50);
  }
  
  if (currentMin < 9999 && currentMax > 0) {
    // Werte anpassen
    minDistance = currentMin - 15;
    maxDistance = currentMax + 15;
    
    preferences.putInt("minDistance", minDistance);
    preferences.putInt("maxDistance", maxDistance);
    
    Serial.printf("[CALIBRATION COMPLETE] Angepasste Werte -> Min: %d mm, Max: %d mm\n", minDistance, maxDistance);
  } else {
    Serial.println("[ERROR] Kalibrierung fehlgeschlagen! Keine gÃ¼ltigen Werte erhalten.");
  }
}

// 5â€‘Sekundenâ€‘Messung mit VL53L0X und Ereigniserkennung
void measureForFiveSeconds() {
  Serial.println("[MEASURE] Starte 5â€‘Sekundenâ€‘Messung...");
  
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  
  lox.setMeasurementTimingBudgetMicroSeconds(20000); // 20 ms Timingâ€‘Budget
  
  unsigned long startTime = millis();
  std::vector<int> distanceBuffer;
  int invalidCount = 0;
  
  while (millis() - startTime < 5000) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    
    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      distanceBuffer.push_back(distance);
      Serial.printf("[MEASUREMENT] Distanz: %d mm\n", distance);
    } else {
      Serial.println("[MEASUREMENT WARNING] UngÃ¼ltige Messung.");
      invalidCount++;
    }
    delay(20);
  }
  
  if (distanceBuffer.empty()) {
    Serial.println("[INFO] Keine gÃ¼ltigen Messwerte erhalten.");
    return;
  }
  
  int minValue = *std::min_element(distanceBuffer.begin(), distanceBuffer.end());
  int maxValue = *std::max_element(distanceBuffer.begin(), distanceBuffer.end());
  int averageValue = std::accumulate(distanceBuffer.begin(), distanceBuffer.end(), 0) / distanceBuffer.size();
  
  Serial.printf("[ANALYSE] Min: %d mm, Max: %d mm, Durchschnitt: %d mm\n", minValue, maxValue, averageValue);
  
  bool briefErkannt = (minValue < minDistance);
  bool kastenGeoeffnet = (maxValue > maxDistance);
  
  if (briefErkannt) {
    Serial.printf("[POST] Brief erkannt bei minimaler Distanz: %d mm\n", minValue);
    sendLetterEvent(minValue);
  } else if (kastenGeoeffnet) {
    Serial.printf("[OPEN] Briefkasten geÃ¶ffnet bei maximaler Distanz: %d mm\n", maxValue);
    sendDoorEvent(maxValue);
  } else {
    Serial.println("[INFO] Kein Ereignis erkannt.");
  }
}

// -------------------- DEEP SLEEP KONFIGURATION --------------------
void configureDeepSleep() {
  Serial.println("[DEBUG] -> configureDeepSleep()");
  
  // Wakeup durch PIR-Sensor (GPIO 27, HIGH Level)
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_27, 1);
  
  // Wakeup durch Timer (Keepâ€‘Alive)
  esp_sleep_enable_timer_wakeup(keepAliveInterval * 1000); // Umrechnung in Mikrosekunden
  
  Serial.println("[INFO] Deep Sleep wird in 5 Sekunden gestartet...");
  delay(5000);
  Serial.println("[INFO] Jetzt Deep Sleep!");
  esp_deep_sleep_start();
}

// -------------------- SETUP & LOOP --------------------
void setup() {
  // Initialisierung der Pins
  pinMode(PIR_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);
  
  Serial.begin(115200);
  Wire.begin();
  delay(200);  // Pufferzeit fÃ¼r serielle Initialisierung
  
  // Preferences initialisieren
  preferences.begin("briefkasten", false);
  
  // Reset-Taster prÃ¼fen
  bool resetWifi = isResetButtonPressed();
  WiFiManager wifiManager;
  if (resetWifi) {
    Serial.println("[INFO] Resetâ€‘Taster gedrÃ¼ckt. LÃ¶sche gespeicherte WLANâ€‘Daten.");
    wifiManager.resetSettings();
  }
  
  // Wakeup-Grund ermitteln
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();
  
  if (wakeup_reason == ESP_SLEEP_WAKEUP_EXT0) {
    Serial.println("============================================");
    Serial.println("[WAKEUP] ESP32 wurde durch PIR-Sensor geweckt!");
    
    String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
    minDistance = preferences.getInt("minDistance", 0);
    maxDistance = preferences.getInt("maxDistance", 0);
    
    Serial.printf("[INFO] Lokale MAC-Adresse: '%s'\n", macAddress.c_str());
    Serial.printf("[INFO] Geladene Kalibrierungswerte: Min: %d mm, Max: %d mm\n", minDistance, maxDistance);
    Serial.println("============================================");
    
    if (minDistance == 0 || maxDistance == 0) {
      Serial.println("[ERROR] Keine Kalibrierungsdaten gefunden! Starte Kalibrierung...");
      calibrateVL53L0X();
    }
    
    measureForFiveSeconds();
    configureDeepSleep();
    
  } else if (wakeup_reason == ESP_SLEEP_WAKEUP_TIMER) {
    Serial.println("============================================");
    Serial.println("[WAKEUP] ESP32 wurde durch Timer (Keepâ€‘Alive) geweckt!");
    
    String macAddress = preferences.getString("mac_address", "Nicht gesetzt");
    Serial.printf("[INFO] Lokale MAC-Adresse: '%s'\n", macAddress.c_str());
    Serial.println("============================================");
    
    connectToWiFi();
    sendKeepAlive();
    configureDeepSleep();
    
  } else {
    Serial.println("============================================");
    Serial.println("[INFO] ESP32 startet neu (Power On oder Reset).");
    
    WiFiManager wifiManager;
    if (!wifiManager.autoConnect("BriefkastenAP")) {
      Serial.println("[WIFI] Verbindung fehlgeschlagen und Timeout erreicht");
      ESP.restart();
      delay(1000);
    }
    
    Serial.printf("\n[WIFI] Erfolgreich verbunden! IP-Adresse: %s\n", WiFi.localIP().toString().c_str());
    
    String macAddress = WiFi.macAddress();
    Serial.printf("[INFO] Ausgelesene MAC-Adresse: '%s'\n", macAddress.c_str());
    
    if (!preferences.isKey("mac_address")) {
      preferences.putString("mac_address", macAddress);
      Serial.println("[INFO] MAC-Adresse lokal gespeichert.");
    } else {
      String storedMac = preferences.getString("mac_address", "Nicht gesetzt");
      Serial.printf("[INFO] Lokal gespeicherte MAC-Adresse: '%s'\n", storedMac.c_str());
      if (storedMac != macAddress) {
        Serial.println("[WARNING] Aktuelle MAC-Adresse stimmt nicht mit gespeicherter Ã¼berein. Aktualisiere...");
        preferences.putString("mac_address", macAddress);
      }
    }
    
    sendDeviceInfo();
    Serial.println("[INFO] Warte 1 Minute vor der Kalibrierung...");
    // delay(60000);  // Optional: Wartezeit vor der Kalibrierung
    calibrateVL53L0X();
    sendCalibrationData();
    configureDeepSleep();
  }
}

void loop() {
  // Falls ESP32 nicht in Deep Sleep geht: Keepâ€‘Alive alle 15 Minuten senden
  if (millis() - lastKeepAlive >= keepAliveInterval) {
    connectToWiFi();
    sendKeepAlive();
    lastKeepAlive = millis();
  }
}
