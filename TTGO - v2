/******************************************************
 * TTGO T-Call V1.4 – Briefkasten-Logic mit VL53L0X
 * und PIR-Sensor. Datenübertragung per SIM-Karte
 * (NUR via SAPBR – kein CIP/CIICR/CIFSR)!
 *
 * Variante: Batching von Events, nur 1x GPRS-Aufbau
 ******************************************************/

#include <WiFi.h>       // zum Abschalten von WLAN
#include <esp_bt.h>     // zum Abschalten von BT
#include <HardwareSerial.h>
#include <Wire.h>
#include <Adafruit_VL53L0X.h>
#include <Preferences.h>
#include <vector>
#include <numeric>
#include <esp_sleep.h>

// ====================== SIM800L-Pins TTGO T-Call V1.4 ======================
#define MODEM_TX         27   // TXD des SIM800L → ESP32 GPIO27
#define MODEM_RX         26   // RXD des SIM800L → ESP32 GPIO26
#define MODEM_PWRKEY     4    // PWRKEY-Pin des SIM800L
#define MODEM_POWER_ON   23   // Power-Enable-Pin des SIM800L
#define LED_PIN          13   // LED auf dem TTGO-Board

// ====================== Weitere Hardware-Pins ==============================
#define PIR_PIN          33   // PIR-Sensor (RTC-fähiger Pin!)
#define RESET_BUTTON_PIN 0    // Reset-Taster (falls verfügbar)

// ====================== SIM800L-Einstellungen ==============================
#define MODEM_BAUD       115200
// Beispiel-APN:
const char* APN         = "web.vodafone.de";
const char* APN_USER    = "";
const char* APN_PASS    = "";

// ====================== Server-Endpunkte ===================================
// Wir haben jetzt nur EINEN Endpunkt "batchedEventsUrl", um ein einziges
// JSON-Array zu schicken.
// Falls du mehrere Endpunkte brauchst, könntest du das auch anpassen.
const char* batchedEventsUrl = "http://45.195.250.247:8002/batchedEvents";

// Ein Keepalive-Endpoint kann separat sein:
const char* keepaliveServerUrl = "http://45.195.250.247:8002/keepalive";

// ====================== Globale Variablen =================================
Preferences preferences;
Adafruit_VL53L0X lox;

// Globale Variablen für Kalibrierung:
int minDistance = 0;
int maxDistance = 0;

// Deep-Sleep-Intervall für Keepalive:
const unsigned long keepAliveInterval = 15UL * 60UL * 1000UL; // 15 Minuten in ms

// SIM800L über UART1 ansteuern
HardwareSerial sim800(1);

// ------------- Batching: Hier sammeln wir die einzelnen Event-Daten -----------
std::vector<String> eventBatch;

// -------------------------------------------------------------
// Hilfsfunktionen für AT-Befehle und GPRS (SAPBR)
// -------------------------------------------------------------
String sendAT(const String& cmd, uint32_t timeout = 2000) {
  sim800.println(cmd);
  unsigned long start = millis();
  String resp;
  while (millis() - start < timeout) {
    while (sim800.available()) {
      char c = sim800.read();
      resp += c;
    }
    delay(10);
  }
  Serial.println(">> " + resp);
  return resp;
}

bool readUntil(const String& target, uint32_t timeout, String& response) {
  unsigned long start = millis();
  response = "";
  while (millis() - start < timeout) {
    while (sim800.available()) {
      char c = sim800.read();
      response += c;
      if (response.indexOf(target) != -1) {
        return true;
      }
    }
    delay(10);
  }
  return false;
}

// SIM800L einschalten (POWER_ON + PWRKEY)
void powerOnSIM800L() {
  Serial.println("[MODEM] Schalte SIM800L ein...");
  pinMode(MODEM_POWER_ON, OUTPUT);
  pinMode(MODEM_PWRKEY, OUTPUT);

  digitalWrite(MODEM_POWER_ON, HIGH);
  delay(100);

  digitalWrite(MODEM_PWRKEY, LOW);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, HIGH);
  delay(4000);
}

// Netzwerkregistrierung abwarten
bool waitForNetworkRegistration(uint32_t timeout = 60000) {
  Serial.println("[GPRS] Warte auf Netzregistrierung...");
  unsigned long start = millis();
  while (millis() - start < timeout) {
    String resp = sendAT("AT+CREG?", 2000);
    if (resp.indexOf("+CREG: 0,1") != -1 || resp.indexOf("+CREG: 0,5") != -1) {
      Serial.println("[GPRS] Netz registriert.");
      return true;
    }
    delay(2000);
  }
  Serial.println("[GPRS] Netzregistrierung fehlgeschlagen.");
  return false;
}

// GPRS-Verbindung aufbauen (SAPBR)
bool openInternetSession() {
  Serial.println("[GPRS] Öffne Internet-Verbindung (SAPBR)...");
  // Alte Sessions beenden:
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+CIPSHUT", 3000);

  // SAPBR-Parameter
  sendAT("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"", 1000);
  sendAT("AT+SAPBR=3,1,\"APN\",\"" + String(APN) + "\"", 1000);
  if (strlen(APN_USER) > 0) {
    sendAT("AT+SAPBR=3,1,\"USER\",\"" + String(APN_USER) + "\"", 1000);
  }
  if (strlen(APN_PASS) > 0) {
    sendAT("AT+SAPBR=3,1,\"PWD\",\"" + String(APN_PASS) + "\"", 1000);
  }

  String resp = sendAT("AT+SAPBR=1,1", 6000);
  if (resp.indexOf("OK") == -1) {
    Serial.println("[GPRS] ❌ Konnte SAPBR nicht öffnen!");
    return false;
  }
  resp = sendAT("AT+SAPBR=2,1", 2000);
  if (resp.indexOf("+SAPBR: 1,1") == -1) {
    Serial.println("[GPRS] ❌ Keine IP erhalten?");
    return false;
  }
  Serial.println("[GPRS] ✅ SAPBR-Verbindung aktiv.");
  return true;
}

// GPRS-Verbindung abbauen
void closeInternetSession() {
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+SAPBR=0,1", 3000);
  sendAT("AT+CIPSHUT", 3000);
  Serial.println("[GPRS] Verbindung beendet.");
}

// -------------------------------------------------------------
// HTTP-Funktionen: Nur 1x Internet aufbauen, mehrere Requests
// -------------------------------------------------------------

/**
 * Hilfsfunktion, um EINEN JSON-String per HTTP POST zu senden,
 * ohne SAPBR zu öffnen/schließen (das geschieht in open/closeInternetSession()).
 */
bool doHttpPOST(const String& url, const String& jsonPayload) {
  // wir gehen davon aus, dass openInternetSession() schon aufgerufen wurde!

  // Alte HTTP-Session schließen, neue beginnen
  sendAT("AT+HTTPTERM", 1000);
  sendAT("AT+HTTPINIT", 1000);

  sendAT("AT+HTTPPARA=\"CID\",1", 500);
  sendAT("AT+HTTPSSL=0", 500);  // Nur HTTP
  sendAT("AT+HTTPPARA=\"URL\",\"" + url + "\"", 1000);
  sendAT("AT+HTTPPARA=\"CONTENT\",\"application/json\"", 500);

  int length = jsonPayload.length();
  Serial.printf("[HTTP] Sende %d Bytes an %s\n", length, url.c_str());

  // HTTPDATA
  String resp = sendAT("AT+HTTPDATA=" + String(length) + ",15000", 3000);
  if (resp.indexOf("DOWNLOAD") == -1) {
    Serial.println("[HTTP] ❌ HTTPDATA-Fehler.");
    sendAT("AT+HTTPTERM", 500);
    return false;
  }
  delay(300);
  sim800.write(jsonPayload.c_str(), length);
  delay(300);

  // HTTPACTION=1 (POST)
  sendAT("AT+HTTPACTION=1", 2000);
  Serial.println("[HTTP] HTTP-POST gesendet. Warte auf Antwort...");

  // Auf +HTTPACTION warten
  String actionResp;
  bool success = readUntil("+HTTPACTION: 1,", 20000, actionResp);
  if (success) {
    int startIdx = actionResp.indexOf("+HTTPACTION: 1,") + 14;
    int commaPos = actionResp.indexOf(",", startIdx);
    int statusCode = actionResp.substring(startIdx, commaPos).toInt();
    if (statusCode == 200 || statusCode == 201) {
      Serial.printf("[HTTP] ✅ HTTP-POST erfolgreich! (Status %d)\n", statusCode);
    } else {
      Serial.printf("[HTTP] ❌ Fehlerhafte HTTP-Antwort: %d\n", statusCode);
    }
  } else {
    Serial.println("[HTTP] ❌ Keine Antwort erhalten.");
  }

  // Server-Antwort auslesen
  resp = sendAT("AT+HTTPREAD", 5000);
  Serial.println("[HTTP] Server-Antwort:\n" + resp);

  // HTTP beenden (aber SAPBR bleibt offen)
  sendAT("AT+HTTPTERM", 500);
  return true;
}

// -------------------------------------------------------------
// EVENTS SAMMELN (statt sofort senden)
// -------------------------------------------------------------
/**
 * Event in den globalen Vektor "eventBatch" schieben.
 * Hier z.B. "letter_detected" oder "door_opened".
 */
void addEventToBatch(const String &eventPayload) {
  eventBatch.push_back(eventPayload);
  Serial.println("[BATCH] Event hinzugefügt. Aktuelle Anzahl: " + String(eventBatch.size()));
}

/**
 * Tür-Event: Nur in Batch speichern
 */
void sendDoorEvent(int distance) {
  // Anstatt direkt ins Netz zu gehen, wir bauen den JSON und schieben ihn in den Batch
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = "{\"mac_address\":\"" + macAddress +
                   "\",\"event\":\"door_opened\",\"distance\":" +
                   String(distance) + "}";
  addEventToBatch(payload);
}

/**
 * Brief-Event: Nur in Batch speichern
 */
void sendLetterEvent(int distance) {
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = "{\"mac_address\":\"" + macAddress +
                   "\",\"event\":\"letter_detected\",\"distance\":" +
                   String(distance) + "}";
  addEventToBatch(payload);
}

// -------------------------------------------------------------
// ALLE Events am Ende als ein JSON-Array senden
// -------------------------------------------------------------
bool sendBatchedEvents() {
  if (eventBatch.empty()) {
    Serial.println("[BATCH] Keine Events zu senden.");
    return true;  // Kein Fehler
  }

  // 1) GPRS-Verbindung nur EINMAL aufbauen
  if (!waitForNetworkRegistration()) {
    Serial.println("[BATCH] ❌ Netz nicht registriert. Abbruch.");
    return false;
  }
  if (!openInternetSession()) {
    Serial.println("[BATCH] ❌ Konnte SAPBR nicht öffnen!");
    return false;
  }

  // 2) JSON-Array bauen aus allen Event-Strings
  //    z.B. [ {...}, {...}, {...} ]
  String batchedJson = "[";
  for (size_t i = 0; i < eventBatch.size(); i++) {
    batchedJson += eventBatch[i];
    if (i < eventBatch.size() - 1) {
      batchedJson += ",";
    }
  }
  batchedJson += "]";
  
  Serial.println("[BATCH] Sende Gesamten Batch:\n" + batchedJson);

  // 3) POST an "batchedEventsUrl"
  bool success = doHttpPOST(batchedEventsUrl, batchedJson);

  // 4) Schließen
  closeInternetSession();

  // Wenn erfolgreich, Batch leeren
  if (success) {
    eventBatch.clear();
    Serial.println("[BATCH] Batch gesendet und geleert.");
  } else {
    Serial.println("[BATCH] Fehler beim Senden. Events bleiben im Batch.");
  }
  return success;
}

// -------------------------------------------------------------
// KeepAlive als eigenen Request (sofern nötig)
// -------------------------------------------------------------
bool sendKeepAlive() {
  // Evtl. ebenfalls Batching – oder separater Request. Hier separat:
  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = "{\"mac_address\":\"" + macAddress + "\"}";
  Serial.println("[KEEPALIVE] Sende KeepAlive: " + payload);

  // 1) GPRS
  if (!waitForNetworkRegistration()) {
    Serial.println("[KEEPALIVE] ❌ Kein Netz. Abbruch.");
    return false;
  }
  if (!openInternetSession()) {
    Serial.println("[KEEPALIVE] ❌ Konnte SAPBR nicht öffnen.");
    return false;
  }

  // 2) POST
  bool success = doHttpPOST(String(keepaliveServerUrl), payload);

  // 3) Schließen
  closeInternetSession();

  if (success) {
    Serial.println("[KEEPALIVE] ✅ Keep Alive OK");
  } else {
    Serial.println("[KEEPALIVE] ❌ Keep Alive fehlgeschlagen");
  }
  return success;
}

// -------------------------------------------------------------
// VL53L0X (Kalibrierung und Messung)
// -------------------------------------------------------------
void calibrateVL53L0X() {
  Serial.println("[CALIBRATION] Initialisiere VL53L0X...");
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  unsigned long startTime = millis();
  unsigned long duration = 3000; // 3 Sekunden messen
  int currentMin = 9999;
  int currentMax = 0;
  Serial.println("[CALIBRATION] Messe 3 Sekunden...");
  while (millis() - startTime < duration) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      if (distance < currentMin) currentMin = distance;
      if (distance > currentMax) currentMax = distance;
      Serial.printf("[CAL] Distanz: %d mm\n", distance);
    }
    else {
      Serial.println("[CAL] Ungültige Messung...");
    }
    delay(50);
  }
  if (currentMin < 9999 && currentMax > 0) {
    minDistance = currentMin - 15;
    maxDistance = currentMax + 15;
    preferences.putInt("minDistance", minDistance);
    preferences.putInt("maxDistance", maxDistance);
    Serial.printf("[CAL DONE] Min: %d mm, Max: %d mm\n", minDistance, maxDistance);
  }
  else {
    Serial.println("[ERROR] Kalibrierung fehlgeschlagen!");
  }
}

void measureForFiveSeconds() {
  Serial.println("[MEASURE] Starte 5-Sekunden-Messung...");
  if (!lox.begin()) {
    Serial.println("[ERROR] VL53L0X konnte nicht initialisiert werden!");
    return;
  }
  lox.setMeasurementTimingBudgetMicroSeconds(20000);
  unsigned long startTime = millis();
  std::vector<int> distanceBuffer;

  while (millis() - startTime < 5000) {
    VL53L0X_RangingMeasurementData_t measure;
    lox.rangingTest(&measure, false);
    if (measure.RangeStatus != 4) {
      int distance = measure.RangeMilliMeter;
      distanceBuffer.push_back(distance);
      Serial.printf("[MEAS] Distanz: %d mm\n", distance);
    }
    else {
      Serial.println("[MEAS] Ungültig...");
    }
    delay(20);
  }
  if (distanceBuffer.empty()) {
    Serial.println("[MEAS] Keine gültigen Messwerte.");
    return;
  }
  int minValue = *std::min_element(distanceBuffer.begin(), distanceBuffer.end());
  int maxValue = *std::max_element(distanceBuffer.begin(), distanceBuffer.end());
  int averageValue = std::accumulate(distanceBuffer.begin(), distanceBuffer.end(), 0)
                     / (int)distanceBuffer.size();
  Serial.printf("[ANALYSE] Min: %d, Max: %d, Avg: %d\n", minValue, maxValue, averageValue);

  bool briefErkannt    = (minValue < minDistance);
  bool kastenGeoeffnet = (maxValue > maxDistance);
  if (briefErkannt) {
    Serial.printf("[EVENT] Brief erkannt (Dist=%d)\n", minValue);
    sendLetterEvent(minValue);   // Legt nur ins Batch
  }
  else if (kastenGeoeffnet) {
    Serial.printf("[EVENT] Tür geöffnet (Dist=%d)\n", maxValue);
    sendDoorEvent(maxValue);     // Legt nur ins Batch
  }
  else {
    Serial.println("[INFO] Kein Ereignis erkannt.");
  }
}

// -------------------------------------------------------------
// Sonstige Funktionen: DeviceInfo, MAC, DeepSleep
// -------------------------------------------------------------
String getLocalMacAddress() {
  uint64_t chipid = ESP.getEfuseMac();
  char macStr[13];
  sprintf(macStr, "%04X%08X", (uint16_t)(chipid >> 32), (uint32_t)chipid);
  return String(macStr);
}

// Dieses Beispiel macht NUR Batching –
// Falls du separat Device-Info senden willst, könnte das
// auch in das Batch. Hier noch als Extra-Funktion:
void sendDeviceInfoDirect() {
  // (Sofern du das wirklich separat willst.)
  if (!waitForNetworkRegistration()) return;
  if (!openInternetSession()) return;

  String macAddress = preferences.getString("mac_address", "Unbekannt");
  String payload = "{\"mac_address\":\"" + macAddress + "\",\"firmware_version\":\"1.0.0\"}";

  doHttpPOST("http://45.195.250.247:8002/device", payload);

  closeInternetSession();
}

// Bei Batching-Variante: 
// void addDeviceInfoToBatch() { ... } => In eventBatch am Ende
// -> Dann in sendBatchedEvents() an "batchedEventsUrl"

bool isResetButtonPressed() {
  const unsigned long debounceTime = 2000;
  unsigned long pressedTime = 0;
  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    Serial.println("[INFO] Reset-Taster erkannt. Warte...");
    pressedTime = millis();
    while (digitalRead(RESET_BUTTON_PIN) == LOW) {
      delay(100);
      if (millis() - pressedTime > debounceTime) {
        Serial.println("[INFO] Reset-Taster >2s gedrückt.");
        return true;
      }
    }
  }
  return false;
}

void configureDeepSleep() {
  Serial.println("[SLEEP] -> configureDeepSleep()");
  
  // **Bevor** wir schlafen gehen, alle Events senden:
  sendBatchedEvents(); // Hier EINEN großen Request
  
  // Das SIM800L kann jetzt wieder abgeschaltet werden
  digitalWrite(MODEM_POWER_ON, LOW);
  delay(100);

  // Timer Wakeup (Keep-Alive):
  esp_sleep_enable_timer_wakeup((uint64_t)keepAliveInterval * 1000ULL);

  Serial.println("[SLEEP] Gehe in 1s in Deep Sleep...");
  delay(1000);
  Serial.println("[SLEEP] Jetzt Deep Sleep!");
  esp_deep_sleep_start();
}

// -------------------------------------------------------------
// SETUP & LOOP
// -------------------------------------------------------------
void setup() {
  Serial.begin(115200);
  delay(100);

  // WLAN und Bluetooth deaktivieren, spart Strom
  WiFi.mode(WIFI_OFF);
  btStop();

  Serial.println("\n=== TTGO T-Call (SAPBR-only) Batching-Version ===");

  // Pins initialisieren
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  pinMode(PIR_PIN, INPUT_PULLDOWN); 
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);

  // Preferences init
  preferences.begin("briefkasten", false);

  // SIM800L einschalten
  powerOnSIM800L();
  sim800.begin(MODEM_BAUD, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(2000);

  // Test AT
  String resp = sendAT("AT", 2000);
  if (resp.indexOf("OK") == -1) {
    Serial.println("[MODEM] ❌ Keine Antwort vom Modem. Stromversorgung prüfen!");
  } else {
    Serial.println("[MODEM] ✅ Modem reagiert.");
  }

  // Nur GSM (2G)
  sendAT("AT+CNMP=2", 1000);
  sendAT("AT+CMNB=0", 1000);

  // MAC in Preferences?
  String storedMac = preferences.getString("mac_address", "");
  if (storedMac.isEmpty()) {
    String newMac = getLocalMacAddress();
    preferences.putString("mac_address", newMac);
    Serial.println("[INFO] Neue MAC/ID abgespeichert: " + newMac);
  } else {
    Serial.println("[INFO] MAC/ID bereits vorhanden: " + storedMac);
  }

  // Debug: CSQ, CREG, etc.
  Serial.println("[DEBUG] Signalstärke:");
  Serial.println(sendAT("AT+CSQ"));
  Serial.println("[DEBUG] Netzregistrierung (CREG):");
  Serial.println(sendAT("AT+CREG?"));
  Serial.println("[DEBUG] GPRS-Registrierung (CGREG):");
  Serial.println(sendAT("AT+CGREG?"));
  Serial.println("[DEBUG] SIM-Status:");
  Serial.println(sendAT("AT+CPIN?"));

  // Wakeup-Grund checken
  esp_sleep_wakeup_cause_t wakeup_reason = esp_sleep_get_wakeup_cause();
  Serial.printf("[WAKEUP] wakeup_reason: %d\n", wakeup_reason);

  if (wakeup_reason == ESP_SLEEP_WAKEUP_EXT1) {
    // PIR (ext1) 
    Serial.println("============================================");
    Serial.println("[WAKEUP] Durch PIR aufgewacht (ext1)!");
    // Kalibrierung laden
    minDistance = preferences.getInt("minDistance", 0);
    maxDistance = preferences.getInt("maxDistance", 0);
    if (minDistance == 0 || maxDistance == 0) {
      Serial.println("[ERROR] Keine Kalibrierung vorhanden! Starte Kalibrierung...");
      calibrateVL53L0X();
    }
    measureForFiveSeconds();  // Sammelt Events in eventBatch
    // Am Ende -> Deep Sleep (davor sendBatchedEvents in configureDeepSleep)
    configureDeepSleep();
  }
  else if (wakeup_reason == ESP_SLEEP_WAKEUP_TIMER) {
    // Durch Timer -> KeepAlive
    Serial.println("============================================");
    Serial.println("[WAKEUP] Durch Timer (Keep-Alive) aufgewacht!");
    delay(500);

    // Du könntest hier erst "eventBatch" senden oder NACH dem KeepAlive.
    // In diesem Beispiel machen wir 2 Requests: 
    // 1) Batched Events
    sendBatchedEvents();
    // 2) KeepAlive
    sendKeepAlive();

    configureDeepSleep();
  }
  else {
    // Normaler Start
    Serial.println("============================================");
    Serial.println("[START] Power On oder Reset.");
    bool resetRequested = isResetButtonPressed();
    if (resetRequested) {
      Serial.println("[INFO] Reset-Taster wurde lange gedrückt.");
      // ggf. Defaults zurücksetzen
    }

    String macAddress = preferences.getString("mac_address", "Unbekannt");
    Serial.println("[INFO] MAC/ID: " + macAddress);

    // Kalibrierung, etc.
    Serial.println("[INFO] Starte Kalibrierung in 2s...");
    delay(2000);
    calibrateVL53L0X();

    // Danach 5s messen (Beispiel):
    measureForFiveSeconds();

    // Hier könntest du optional eine DeviceInfo noch ins Batch packen
    // oder direkt senden (was weniger stromsparend wäre).
    // z.B. addEventToBatch("{\"type\":\"device_info\"}");

    // Dann ab in den Schlaf, dort wird "sendBatchedEvents()" aufgerufen.
    configureDeepSleep();
  }
}

void loop() {
  // Der Loop wird selten erreicht, da wir im Deep Sleep landen.
}
